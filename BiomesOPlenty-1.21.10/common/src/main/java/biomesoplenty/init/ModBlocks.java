/*******************************************************************************
 * Copyright 2022, the Glitchfiend Team.
 * All rights reserved.
 ******************************************************************************/
package biomesoplenty.init;

import biomesoplenty.api.block.BOPBlockSetTypes;
import biomesoplenty.api.block.BOPFluids;
import biomesoplenty.api.block.BOPWoodTypes;
import biomesoplenty.api.sound.BOPSounds;
import biomesoplenty.block.*;
import biomesoplenty.block.trees.BOPTreeGrowers;
import biomesoplenty.core.BiomesOPlenty;
import biomesoplenty.worldgen.BOPSurfaceRuleData;
import net.minecraft.core.BlockPos;
import net.minecraft.core.Direction;
import net.minecraft.core.particles.ColorParticleOption;
import net.minecraft.core.particles.ParticleTypes;
import net.minecraft.core.registries.Registries;
import net.minecraft.resources.ResourceKey;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.sounds.SoundEvents;
import net.minecraft.util.ColorRGBA;
import net.minecraft.world.effect.MobEffects;
import net.minecraft.world.entity.EntityType;
import net.minecraft.world.level.BlockGetter;
import net.minecraft.world.level.block.*;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.block.state.properties.NoteBlockInstrument;
import net.minecraft.world.level.material.MapColor;
import net.minecraft.world.level.material.PushReaction;
import terrablender.api.SurfaceRuleManager;

import java.util.function.BiConsumer;
import java.util.function.Function;

import static biomesoplenty.api.block.BOPBlocks.*;

public class ModBlocks
{
    public static void setup(BiConsumer<ResourceLocation, Block> func)
    {
        registerBlocks(func);
        registerSurfaceRules();
    }

    private static void registerSurfaceRules()
    {
        SurfaceRuleManager.addSurfaceRules(SurfaceRuleManager.RuleCategory.OVERWORLD, BiomesOPlenty.MOD_ID, BOPSurfaceRuleData.overworld());
        SurfaceRuleManager.addSurfaceRules(SurfaceRuleManager.RuleCategory.NETHER, BiomesOPlenty.MOD_ID, BOPSurfaceRuleData.nether());
        SurfaceRuleManager.addSurfaceRules(SurfaceRuleManager.RuleCategory.END, BiomesOPlenty.MOD_ID, BOPSurfaceRuleData.end());
    }

    private static void registerBlocks(BiConsumer<ResourceLocation, Block> func)
    {
        // ([A-Z_]*) = register\(func, "([a-z_]+)", new ([A-Za-z]+)\(.*(BlockBehaviour.Properties.*)\)\);

        // Fluids
        BLOOD = register(func, "blood", p -> new BloodBlock(BOPFluids.FLOWING_BLOOD, p), BlockBehaviour.Properties.of().replaceable().pushReaction(PushReaction.DESTROY).liquid().noCollision().randomTicks().noLootTable().mapColor(MapColor.CRIMSON_NYLIUM).sound(SoundType.EMPTY).strength(100.0F));
        LIQUID_NULL = register(func, "liquid_null", p -> new BloodBlock(BOPFluids.FLOWING_LIQUID_NULL, p), BlockBehaviour.Properties.of().replaceable().pushReaction(PushReaction.DESTROY).liquid().noCollision().randomTicks().noLootTable().sound(SoundType.EMPTY).strength(100.0F));

        // Terrain
        WHITE_SAND = register(func, "white_sand", p -> new SandBlockBOP(new ColorRGBA(0xF3F1E4), p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.SNARE).mapColor(MapColor.QUARTZ).strength(0.5F).sound(SoundType.SAND));
        WHITE_SANDSTONE = register(func, "white_sandstone", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.QUARTZ).requiresCorrectToolForDrops().strength(0.8F));
        WHITE_SANDSTONE_STAIRS = register(func, "white_sandstone_stairs", p -> new StairBlock(WHITE_SANDSTONE.defaultBlockState(), p), Block.Properties.ofFullCopy(WHITE_SANDSTONE));
        WHITE_SANDSTONE_SLAB = register(func, "white_sandstone_slab", SlabBlock::new, Block.Properties.ofFullCopy(WHITE_SANDSTONE));
        WHITE_SANDSTONE_WALL = register(func, "white_sandstone_wall", WallBlock::new, Block.Properties.ofFullCopy(WHITE_SANDSTONE).forceSolidOn());
        SMOOTH_WHITE_SANDSTONE = register(func, "smooth_white_sandstone", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.QUARTZ).requiresCorrectToolForDrops().strength(2.0F, 6.0F));
        SMOOTH_WHITE_SANDSTONE_STAIRS = register(func, "smooth_white_sandstone_stairs", p -> new StairBlock(WHITE_SANDSTONE.defaultBlockState(), p), Block.Properties.ofFullCopy(SMOOTH_WHITE_SANDSTONE));
        SMOOTH_WHITE_SANDSTONE_SLAB = register(func, "smooth_white_sandstone_slab", SlabBlock::new, Block.Properties.ofFullCopy(SMOOTH_WHITE_SANDSTONE));
        CUT_WHITE_SANDSTONE = register(func, "cut_white_sandstone", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.QUARTZ).requiresCorrectToolForDrops().strength(0.8F));
        CUT_WHITE_SANDSTONE_SLAB = register(func, "cut_white_sandstone_slab", SlabBlock::new, Block.Properties.ofFullCopy(CUT_WHITE_SANDSTONE));
        CHISELED_WHITE_SANDSTONE = register(func, "chiseled_white_sandstone", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.QUARTZ).requiresCorrectToolForDrops().strength(0.8F));

        ORANGE_SAND = register(func, "orange_sand", p -> new SandBlockBOP(new ColorRGBA(0xCC9A61), p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.SNARE).mapColor(MapColor.COLOR_ORANGE).strength(0.5F).sound(SoundType.SAND));
        ORANGE_SANDSTONE = register(func, "orange_sandstone", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.COLOR_ORANGE).requiresCorrectToolForDrops().strength(0.8F));
        ORANGE_SANDSTONE_STAIRS = register(func, "orange_sandstone_stairs", p -> new StairBlock(ORANGE_SANDSTONE.defaultBlockState(), p), Block.Properties.ofFullCopy(ORANGE_SANDSTONE));
        ORANGE_SANDSTONE_SLAB = register(func, "orange_sandstone_slab", SlabBlock::new, Block.Properties.ofFullCopy(ORANGE_SANDSTONE));
        ORANGE_SANDSTONE_WALL = register(func, "orange_sandstone_wall", WallBlock::new, Block.Properties.ofFullCopy(ORANGE_SANDSTONE).forceSolidOn());
        SMOOTH_ORANGE_SANDSTONE = register(func, "smooth_orange_sandstone", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.COLOR_ORANGE).requiresCorrectToolForDrops().strength(2.0F, 6.0F));
        SMOOTH_ORANGE_SANDSTONE_STAIRS = register(func, "smooth_orange_sandstone_stairs", p -> new StairBlock(ORANGE_SANDSTONE.defaultBlockState(), p), Block.Properties.ofFullCopy(SMOOTH_ORANGE_SANDSTONE));
        SMOOTH_ORANGE_SANDSTONE_SLAB = register(func, "smooth_orange_sandstone_slab", SlabBlock::new, Block.Properties.ofFullCopy(SMOOTH_ORANGE_SANDSTONE));
        CUT_ORANGE_SANDSTONE = register(func, "cut_orange_sandstone", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.COLOR_ORANGE).requiresCorrectToolForDrops().strength(0.8F));
        CUT_ORANGE_SANDSTONE_SLAB = register(func, "cut_orange_sandstone_slab", SlabBlock::new, Block.Properties.ofFullCopy(CUT_ORANGE_SANDSTONE));
        CHISELED_ORANGE_SANDSTONE = register(func, "chiseled_orange_sandstone", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.COLOR_ORANGE).requiresCorrectToolForDrops().strength(0.8F));

        MOSSY_BLACK_SAND = register(func, "mossy_black_sand", p -> new OvergrownSandBlock(new ColorRGBA(0x2D2C2F), p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.SNARE).mapColor(MapColor.COLOR_GREEN).strength(0.5F).randomTicks().sound(SoundType.MOSS));
        BLACK_SAND = register(func, "black_sand", p -> new SandBlockBOP(new ColorRGBA(0x2D2C2F), p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.SNARE).mapColor(MapColor.COLOR_BLACK).strength(0.5F).sound(SoundType.SAND));
        BLACK_SANDSTONE = register(func, "black_sandstone", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.COLOR_BLACK).requiresCorrectToolForDrops().strength(0.8F));
        BLACK_SANDSTONE_STAIRS = register(func, "black_sandstone_stairs", p -> new StairBlock(BLACK_SANDSTONE.defaultBlockState(), p), Block.Properties.ofFullCopy(BLACK_SANDSTONE));
        BLACK_SANDSTONE_SLAB = register(func, "black_sandstone_slab", SlabBlock::new, Block.Properties.ofFullCopy(BLACK_SANDSTONE));
        BLACK_SANDSTONE_WALL = register(func, "black_sandstone_wall", WallBlock::new, Block.Properties.ofFullCopy(BLACK_SANDSTONE).forceSolidOn());
        SMOOTH_BLACK_SANDSTONE = register(func, "smooth_black_sandstone", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.COLOR_BLACK).requiresCorrectToolForDrops().strength(2.0F, 6.0F));
        SMOOTH_BLACK_SANDSTONE_STAIRS = register(func, "smooth_black_sandstone_stairs", p -> new StairBlock(BLACK_SANDSTONE.defaultBlockState(), p), Block.Properties.ofFullCopy(SMOOTH_BLACK_SANDSTONE));
        SMOOTH_BLACK_SANDSTONE_SLAB = register(func, "smooth_black_sandstone_slab", SlabBlock::new, Block.Properties.ofFullCopy(SMOOTH_BLACK_SANDSTONE));
        CUT_BLACK_SANDSTONE = register(func, "cut_black_sandstone", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.COLOR_BLACK).requiresCorrectToolForDrops().strength(0.8F));
        CUT_BLACK_SANDSTONE_SLAB = register(func, "cut_black_sandstone_slab", SlabBlock::new, Block.Properties.ofFullCopy(CUT_BLACK_SANDSTONE));
        CHISELED_BLACK_SANDSTONE = register(func, "chiseled_black_sandstone", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.COLOR_BLACK).requiresCorrectToolForDrops().strength(0.8F));

        MapColor tc1 = MapColor.GOLD;
        MapColor tc2 = MapColor.COLOR_YELLOW;
        MapColor tc3 = MapColor.COLOR_ORANGE;
        MapColor tc4 = MapColor.TERRACOTTA_ORANGE;
        MapColor tc5 = MapColor.TERRACOTTA_RED;
        THERMAL_CALCITE = register(func, "thermal_calcite", ThermalCalciteBlock::new, BlockBehaviour.Properties.of().mapColor((blockState) -> blockState.getValue(ThermalCalciteBlock.DISTANCE) == 1 ? tc1 : blockState.getValue(ThermalCalciteBlock.DISTANCE) == 2 ? tc2 : blockState.getValue(ThermalCalciteBlock.DISTANCE) == 3 ? tc3 : blockState.getValue(ThermalCalciteBlock.DISTANCE) == 4 ? tc4 : tc5).instrument(NoteBlockInstrument.BASEDRUM).sound(SoundType.CALCITE).requiresCorrectToolForDrops().strength(0.75F));
        THERMAL_CALCITE_VENT = register(func, "thermal_calcite_vent", ThermalCalciteVentBlock::new, BlockBehaviour.Properties.of().mapColor((blockState) -> blockState.getValue(ThermalCalciteBlock.DISTANCE) == 1 ? tc1 : blockState.getValue(ThermalCalciteBlock.DISTANCE) == 2 ? tc2 : blockState.getValue(ThermalCalciteBlock.DISTANCE) == 3 ? tc3 : blockState.getValue(ThermalCalciteBlock.DISTANCE) == 4 ? tc4 : tc5).instrument(NoteBlockInstrument.BASEDRUM).sound(SoundType.CALCITE).requiresCorrectToolForDrops().strength(0.75F));
        DRIED_SALT = register(func, "dried_salt", DriedSaltBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).strength(1.0F).sound(new SoundType(1.0F, 0.5F, SoundEvents.GRAVEL_BREAK, SoundEvents.GRAVEL_STEP, SoundEvents.GRAVEL_PLACE, SoundEvents.GRAVEL_HIT, SoundEvents.GRAVEL_FALL)));

        FLESH = register(func, "flesh", FleshBlock::new, BlockBehaviour.Properties.of().randomTicks().mapColor(MapColor.TERRACOTTA_RED).strength(0.4F).sound(new SoundType(1.0F, 0.5F, SoundEvents.CORAL_BLOCK_BREAK, SoundEvents.CORAL_BLOCK_STEP, SoundEvents.CORAL_BLOCK_PLACE, SoundEvents.CORAL_BLOCK_HIT, SoundEvents.CORAL_BLOCK_FALL)));
        POROUS_FLESH = register(func, "porous_flesh", FleshBlock::new, BlockBehaviour.Properties.of().randomTicks().mapColor(MapColor.TERRACOTTA_RED).strength(0.4F).sound(new SoundType(1.0F, 0.5F, SoundEvents.CORAL_BLOCK_BREAK, SoundEvents.CORAL_BLOCK_STEP, SoundEvents.CORAL_BLOCK_PLACE, SoundEvents.CORAL_BLOCK_HIT, SoundEvents.CORAL_BLOCK_FALL)));
        FLESH_TENDONS = register(func, "flesh_tendons", FleshTendonsBottomBlock::new, BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.TERRACOTTA_RED).noCollision().strength(0.2F).sound(new SoundType(1.0F, 0.5F, SoundEvents.CORAL_BLOCK_BREAK, SoundEvents.CORAL_BLOCK_STEP, SoundEvents.CORAL_BLOCK_PLACE, SoundEvents.CORAL_BLOCK_HIT, SoundEvents.CORAL_BLOCK_FALL)));
        FLESH_TENDONS_STRAND = register(func, "flesh_tendons_strand", FleshTendonsBlock::new, BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.TERRACOTTA_RED).noCollision().strength(0.2F).sound(new SoundType(1.0F, 0.5F, SoundEvents.CORAL_BLOCK_BREAK, SoundEvents.CORAL_BLOCK_STEP, SoundEvents.CORAL_BLOCK_PLACE, SoundEvents.CORAL_BLOCK_HIT, SoundEvents.CORAL_BLOCK_FALL)));
        EYEBULB = register(func, "eyebulb", EyebulbBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_RED).pushReaction(PushReaction.DESTROY).noCollision().strength(0.2F).sound(new SoundType(1.0F, 0.5F, SoundEvents.CORAL_BLOCK_BREAK, SoundEvents.CORAL_BLOCK_STEP, SoundEvents.CORAL_BLOCK_PLACE, SoundEvents.CORAL_BLOCK_HIT, SoundEvents.CORAL_BLOCK_FALL)).offsetType(BlockBehaviour.OffsetType.NONE));
        HAIR = register(func, "hair", HairBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.RAW_IRON).pushReaction(PushReaction.DESTROY).noCollision().instabreak().sound(SoundType.WOOL).offsetType(BlockBehaviour.OffsetType.XYZ));
        PUS_BUBBLE = register(func, "pus_bubble", PusBubbleBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_PINK).pushReaction(PushReaction.DESTROY).noCollision().instabreak().sound(new SoundType(1.0F, 1.0F, BOPSounds.PUS_BUBBLE_POP, BOPSounds.PUS_BUBBLE_POP, SoundEvents.CORAL_BLOCK_PLACE, BOPSounds.PUS_BUBBLE_POP, BOPSounds.PUS_BUBBLE_POP)));

        BRIMSTONE = register(func, "brimstone", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.COLOR_YELLOW).requiresCorrectToolForDrops().strength(0.5F));
        BRIMSTONE_BRICKS = register(func, "brimstone_bricks", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.COLOR_YELLOW).requiresCorrectToolForDrops().strength(1.0F, 3.0F));
        BRIMSTONE_BRICK_STAIRS = register(func, "brimstone_brick_stairs", p -> new StairBlock(BRIMSTONE_BRICKS.defaultBlockState(), p), Block.Properties.ofFullCopy(BRIMSTONE_BRICKS));
        BRIMSTONE_BRICK_SLAB = register(func, "brimstone_brick_slab", SlabBlock::new, Block.Properties.ofFullCopy(BRIMSTONE_BRICKS));
        BRIMSTONE_BRICK_WALL = register(func, "brimstone_brick_wall", WallBlock::new, Block.Properties.ofFullCopy(BRIMSTONE_BRICKS).forceSolidOn());
        CHISELED_BRIMSTONE_BRICKS = register(func, "chiseled_brimstone_bricks", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.COLOR_YELLOW).requiresCorrectToolForDrops().strength(1.0F, 3.0F));
        BRIMSTONE_FUMAROLE = register(func, "brimstone_fumarole", BrimstoneFumaroleBlock::new, BlockBehaviour.Properties.ofFullCopy(BRIMSTONE));
        BRIMSTONE_CLUSTER = register(func, "brimstone_cluster", BrimstoneClusterBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_YELLOW).pushReaction(PushReaction.DESTROY).strength(0.2F).sound(SoundType.STONE).offsetType(BlockBehaviour.OffsetType.NONE));
        BRIMSTONE_BUD = register(func, "brimstone_bud", BrimstoneBudBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_YELLOW).pushReaction(PushReaction.DESTROY).noCollision().strength(0.2F).sound(SoundType.STONE).offsetType(BlockBehaviour.OffsetType.XZ));
        BLACKSTONE_SPINES = register(func, "blackstone_spines", BlackstoneDecorationBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_BLACK).pushReaction(PushReaction.DESTROY).noCollision().strength(0.2F).sound(SoundType.STONE).offsetType(BlockBehaviour.OffsetType.XZ));
        BLACKSTONE_BULB = register(func, "blackstone_bulb", BlackstoneDecorationBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_BLACK).pushReaction(PushReaction.DESTROY).noCollision().strength(0.2F).sound(SoundType.STONE).offsetType(BlockBehaviour.OffsetType.XZ).lightLevel((state) -> 2).emissiveRendering((state, world, pos) -> true));

        ROSE_QUARTZ_BLOCK = register(func, "rose_quartz_block", AmethystBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.CRIMSON_STEM).strength(1.5F).sound(SoundType.AMETHYST).requiresCorrectToolForDrops().lightLevel((state) -> 10));
        ROSE_QUARTZ_CLUSTER = register(func, "rose_quartz_cluster", p -> new AmethystClusterBlock(7, 3, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).forceSolidOn().mapColor(MapColor.CRIMSON_STEM).noOcclusion().randomTicks().sound(SoundType.AMETHYST_CLUSTER).strength(1.5F).lightLevel((state) -> 8));
        LARGE_ROSE_QUARTZ_BUD = register(func, "large_rose_quartz_bud", p -> new AmethystClusterBlock(5, 3, p), BlockBehaviour.Properties.ofFullCopy(ROSE_QUARTZ_CLUSTER).pushReaction(PushReaction.DESTROY).forceSolidOn().sound(SoundType.MEDIUM_AMETHYST_BUD).lightLevel((state) -> 7));
        MEDIUM_ROSE_QUARTZ_BUD = register(func, "medium_rose_quartz_bud", p -> new AmethystClusterBlock(4, 3, p), BlockBehaviour.Properties.ofFullCopy(ROSE_QUARTZ_CLUSTER).pushReaction(PushReaction.DESTROY).forceSolidOn().sound(SoundType.LARGE_AMETHYST_BUD).lightLevel((state) -> 6));
        SMALL_ROSE_QUARTZ_BUD = register(func, "small_rose_quartz_bud", p -> new AmethystClusterBlock(3, 4, p), BlockBehaviour.Properties.ofFullCopy(ROSE_QUARTZ_CLUSTER).pushReaction(PushReaction.DESTROY).forceSolidOn().sound(SoundType.SMALL_AMETHYST_BUD).lightLevel((state) -> 5));

        BARNACLES = register(func, "barnacles", BarnaclesBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.CLAY).pushReaction(PushReaction.DESTROY).replaceable().noCollision().sound(SoundType.CORAL_BLOCK));
        WISPJELLY = register(func, "wispjelly", WispjellyBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.GLOW_LICHEN).noOcclusion().noCollision().sound(SoundType.CORAL_BLOCK).isSuffocating(ModBlocks::never).isViewBlocking(ModBlocks::never).strength(0.2F).lightLevel((state) -> 1).emissiveRendering((state, world, pos) -> true));
        //VOIDCAP = register(func, "voidcap", MushroomBlockBOP::new, BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.COLOR_BLACK).noCollision().instabreak().sound(SoundType.GRASS));
        //VOIDCAP_BLOCK = register(func, "voidcap_block", HugeMushroomBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.COLOR_BLACK).strength(0.2F).sound(SoundType.WOOD));
        ALGAL_END_STONE = register(func, "algal_end_stone", AlgalEndStoneBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.TERRACOTTA_YELLOW).randomTicks().requiresCorrectToolForDrops().strength(3.0F, 9.0F));
        UNMAPPED_END_STONE = register(func, "unmapped_end_stone", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.SAND).requiresCorrectToolForDrops().strength(3.0F, 9.0F));
        NULL_END_STONE = register(func, "null_end_stone", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.SAND).requiresCorrectToolForDrops().strength(1.5F, 4.5F));
        NULL_BLOCK = register(func, "null_block", NullBlock::new, BlockBehaviour.Properties.of());
        NULL_LEAVES = register(func, "null_leaves", NullLeavesBlock::new, BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).strength(0.2F).randomTicks().noOcclusion().isValidSpawn(ModBlocks::ocelotOrParrot).isSuffocating(ModBlocks::never).isViewBlocking(ModBlocks::never).isRedstoneConductor(ModBlocks::never));
        NULL_PLANT = register(func, "null_plant", NullPlantBlock::new, BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).replaceable().noCollision().instabreak().offsetType(BlockBehaviour.OffsetType.XZ));
        ANOMALY = register(func, "anomaly", AnomalyBlock::new, BlockBehaviour.Properties.of().lightLevel((state) -> 5));

        TOADSTOOL = register(func, "toadstool", MushroomBlockBOP::new, BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.COLOR_ORANGE).noCollision().instabreak().sound(SoundType.GRASS));
        TOADSTOOL_BLOCK = register(func, "toadstool_block", HugeMushroomBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.COLOR_ORANGE).strength(0.2F).sound(SoundType.WOOD));
        GLOWSHROOM = register(func, "glowshroom", MushroomBlockBOP::new, BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.DIAMOND).noCollision().instabreak().sound(SoundType.GRASS).lightLevel((state) -> 3));
        GLOWSHROOM_BLOCK = register(func, "glowshroom_block", HugeMushroomBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.DIAMOND).strength(0.2F).sound(SoundType.WOOD).lightLevel((state) -> 10).emissiveRendering((state, world, pos) -> true));
        GLOWING_MOSS_BLOCK = register(func, "glowing_moss_block", GlowingMossBlock::new, BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.DIAMOND).strength(0.1F).sound(SoundType.MOSS).lightLevel((state) -> 3));
        GLOWING_MOSS_CARPET = register(func, "glowing_moss_carpet", CarpetBlock::new, BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.DIAMOND).strength(0.1F).sound(SoundType.MOSS_CARPET).lightLevel((state) -> 3));
        GLOWWORM_SILK = register(func, "glowworm_silk", GlowwormSilkBottomBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.DIAMOND).pushReaction(PushReaction.DESTROY).replaceable().ignitedByLava().noCollision().instabreak().sound(SoundType.WOOL).lightLevel((state) -> 2).emissiveRendering((state, world, pos) -> true));
        GLOWWORM_SILK_STRAND = register(func, "glowworm_silk_strand", GlowwormSilkBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.DIAMOND).pushReaction(PushReaction.DESTROY).replaceable().ignitedByLava().noCollision().instabreak().sound(SoundType.WOOL).lightLevel((state) -> 2).emissiveRendering((state, world, pos) -> true));

        SPIDER_EGG = register(func, "spider_egg", SpiderEggBlock::new, BlockBehaviour.Properties.of().strength(0.1F).mapColor(MapColor.WOOL).pushReaction(PushReaction.DESTROY).sound(SoundType.COBWEB).lightLevel((state) -> 5));
        HANGING_COBWEB = register(func, "hanging_cobweb", HangingCobwebBottomBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.WOOL).pushReaction(PushReaction.DESTROY).replaceable().ignitedByLava().noCollision().instabreak().sound(SoundType.COBWEB));
        HANGING_COBWEB_STRAND = register(func, "hanging_cobweb_strand", HangingCobwebBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.WOOL).pushReaction(PushReaction.DESTROY).replaceable().ignitedByLava().noCollision().instabreak().sound(SoundType.COBWEB));
        STRINGY_COBWEB = register(func, "stringy_cobweb", StringyCobwebBlock::new, BlockBehaviour.Properties.of().noLootTable().mapColor(MapColor.WOOL).pushReaction(PushReaction.DESTROY).replaceable().ignitedByLava().noCollision().instabreak().sound(SoundType.COBWEB));
        WEBBING = register(func, "webbing", WebbingBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.WOOL).pushReaction(PushReaction.DESTROY).replaceable().ignitedByLava().noCollision().instabreak().sound(SoundType.COBWEB));

        WHITE_FLOWER_PETAL_BLOCK = register(func, "white_flower_petal_block", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.SNOW).strength(0.2F).sound(SoundType.BIG_DRIPLEAF));
        LIGHT_GRAY_FLOWER_PETAL_BLOCK = register(func, "light_gray_flower_petal_block", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.COLOR_LIGHT_GRAY).strength(0.2F).sound(SoundType.BIG_DRIPLEAF));
        GRAY_FLOWER_PETAL_BLOCK = register(func, "gray_flower_petal_block", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.COLOR_GRAY).strength(0.2F).sound(SoundType.BIG_DRIPLEAF));
        BLACK_FLOWER_PETAL_BLOCK = register(func, "black_flower_petal_block", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.COLOR_BLACK).strength(0.2F).sound(SoundType.BIG_DRIPLEAF));
        BROWN_FLOWER_PETAL_BLOCK = register(func, "brown_flower_petal_block", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.COLOR_BROWN).strength(0.2F).sound(SoundType.BIG_DRIPLEAF));
        RED_FLOWER_PETAL_BLOCK = register(func, "red_flower_petal_block", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.COLOR_RED).strength(0.2F).sound(SoundType.BIG_DRIPLEAF));
        ORANGE_FLOWER_PETAL_BLOCK = register(func, "orange_flower_petal_block", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.COLOR_ORANGE).strength(0.2F).sound(SoundType.BIG_DRIPLEAF));
        YELLOW_FLOWER_PETAL_BLOCK = register(func, "yellow_flower_petal_block", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.COLOR_YELLOW).strength(0.2F).sound(SoundType.BIG_DRIPLEAF));
        LIME_FLOWER_PETAL_BLOCK = register(func, "lime_flower_petal_block", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.COLOR_LIGHT_GREEN).strength(0.2F).sound(SoundType.BIG_DRIPLEAF));
        GREEN_FLOWER_PETAL_BLOCK = register(func, "green_flower_petal_block", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.COLOR_GREEN).strength(0.2F).sound(SoundType.BIG_DRIPLEAF));
        CYAN_FLOWER_PETAL_BLOCK = register(func, "cyan_flower_petal_block", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.COLOR_CYAN).strength(0.2F).sound(SoundType.BIG_DRIPLEAF));
        LIGHT_BLUE_FLOWER_PETAL_BLOCK = register(func, "light_blue_flower_petal_block", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.COLOR_LIGHT_BLUE).strength(0.2F).sound(SoundType.BIG_DRIPLEAF));
        BLUE_FLOWER_PETAL_BLOCK = register(func, "blue_flower_petal_block", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.COLOR_BLUE).strength(0.2F).sound(SoundType.BIG_DRIPLEAF));
        PURPLE_FLOWER_PETAL_BLOCK = register(func, "purple_flower_petal_block", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.COLOR_PURPLE).strength(0.2F).sound(SoundType.BIG_DRIPLEAF));
        MAGENTA_FLOWER_PETAL_BLOCK = register(func, "magenta_flower_petal_block", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.COLOR_MAGENTA).strength(0.2F).sound(SoundType.BIG_DRIPLEAF));
        PINK_FLOWER_PETAL_BLOCK = register(func, "pink_flower_petal_block", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.COLOR_PINK).strength(0.2F).sound(SoundType.BIG_DRIPLEAF));
        FLOWER_STEM = register(func, "flower_stem", RotatedPillarBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASEDRUM).mapColor(MapColor.GRASS).strength(0.2F).sound(SoundType.BIG_DRIPLEAF));

        ORIGIN_GRASS_BLOCK = register(func, "origin_grass_block", OriginGrassBlock::new, BlockBehaviour.Properties.of().randomTicks().mapColor(MapColor.GRASS).strength(0.6F).randomTicks().sound(SoundType.GRASS));

        //Trees
        FLOWERING_OAK_SAPLING = register(func, "flowering_oak_sapling", p -> new SaplingBlockBOP(BOPTreeGrowers.FLOWERING_OAK, p), BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).noCollision().randomTicks().instabreak().sound(SoundType.GRASS));
        FLOWERING_OAK_LEAVES = register(func, "flowering_oak_leaves", p -> new TintedParticleLeavesBlock(0.01F, p), BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn(ModBlocks::ocelotOrParrot).isSuffocating(ModBlocks::never).isViewBlocking(ModBlocks::never).ignitedByLava().isRedstoneConductor(ModBlocks::never));
        CYPRESS_SAPLING = register(func, "cypress_sapling", p -> new SaplingBlockBOP(BOPTreeGrowers.CYPRESS, p), BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).noCollision().randomTicks().instabreak().sound(SoundType.GRASS));
        CYPRESS_LEAVES = register(func, "cypress_leaves", p -> new UntintedParticleLeavesBlock(0.005F, ModParticles.CYPRESS_LEAVES, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.PLANT).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn(ModBlocks::ocelotOrParrot).isSuffocating(ModBlocks::never).isViewBlocking(ModBlocks::never).ignitedByLava().isRedstoneConductor(ModBlocks::never));
        SNOWBLOSSOM_SAPLING = register(func, "snowblossom_sapling", p -> new SaplingBlockBOP(BOPTreeGrowers.SNOWBLOSSOM, p), BlockBehaviour.Properties.of().mapColor(MapColor.SNOW).pushReaction(PushReaction.DESTROY).noCollision().randomTicks().instabreak().sound(SoundType.CHERRY_SAPLING));
        SNOWBLOSSOM_LEAVES = register(func, "snowblossom_leaves", p -> new UntintedParticleLeavesBlock(0.075F, ModParticles.SNOWBLOSSOM_LEAVES, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.SNOW).strength(0.2F).randomTicks().sound(SoundType.CHERRY_LEAVES).noOcclusion().isValidSpawn(ModBlocks::ocelotOrParrot).isSuffocating(ModBlocks::never).isViewBlocking(ModBlocks::never).ignitedByLava().isRedstoneConductor(ModBlocks::never));

        ORIGIN_OAK_SAPLING = register(func, "origin_oak_sapling", p -> new SaplingBlockBOP(BOPTreeGrowers.ORIGIN_OAK, p), BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).noCollision().randomTicks().instabreak().sound(SoundType.GRASS));
        ORIGIN_OAK_LEAVES = register(func, "origin_oak_leaves", p -> new TintedParticleLeavesBlock(0.0F, p), BlockBehaviour.Properties.of().mapColor(MapColor.EMERALD).pushReaction(PushReaction.DESTROY).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn(ModBlocks::ocelotOrParrot).isSuffocating(ModBlocks::never).isViewBlocking(ModBlocks::never).ignitedByLava().isRedstoneConductor(ModBlocks::never));
        ORIGIN_OAK_LOG = register(func, "origin_oak_log", RotatedPillarBlock::new, logProperties(MapColor.WOOD, MapColor.PODZOL, SoundType.WOOD));
        ORIGIN_OAK_WOOD = register(func, "origin_oak_wood", RotatedPillarBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.PODZOL).strength(2.0F).sound(SoundType.WOOD));
        STRIPPED_ORIGIN_OAK_LOG = register(func, "stripped_origin_oak_log", RotatedPillarBlock::new, logProperties(MapColor.WOOD, MapColor.WOOD, SoundType.WOOD));
        STRIPPED_ORIGIN_OAK_WOOD = register(func, "stripped_origin_oak_wood", RotatedPillarBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.WOOD).strength(2.0F).sound(SoundType.WOOD));
        ORIGIN_OAK_PLANKS = register(func, "origin_oak_planks", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.WOOD).strength(2.0F, 3.0F).sound(SoundType.WOOD));
        ORIGIN_OAK_STAIRS = register(func, "origin_oak_stairs", p -> new StairBlock(ORIGIN_OAK_PLANKS.defaultBlockState(), p), Block.Properties.ofFullCopy(ORIGIN_OAK_PLANKS));
        ORIGIN_OAK_SLAB = register(func, "origin_oak_slab", SlabBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.WOOD).strength(2.0F, 3.0F).sound(SoundType.WOOD));
        ORIGIN_OAK_FENCE = register(func, "origin_oak_fence", FenceBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(ORIGIN_OAK_PLANKS.defaultMapColor()).strength(2.0F, 3.0F).sound(SoundType.WOOD));
        ORIGIN_OAK_FENCE_GATE = register(func, "origin_oak_fence_gate", p -> new FenceGateBlock(BOPWoodTypes.ORIGIN_OAK, p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(ORIGIN_OAK_PLANKS.defaultMapColor()).strength(2.0F, 3.0F));
        ORIGIN_OAK_DOOR = register(func, "origin_oak_door", p -> new DoorBlock(BOPBlockSetTypes.ORIGIN_OAK, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(ORIGIN_OAK_PLANKS.defaultMapColor()).strength(3.0F).noOcclusion());
        ORIGIN_OAK_TRAPDOOR = register(func, "origin_oak_trapdoor", p -> new TrapDoorBlock(BOPBlockSetTypes.ORIGIN_OAK, p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.WOOD).strength(3.0F).noOcclusion());
        ORIGIN_OAK_PRESSURE_PLATE = register(func, "origin_oak_pressure_plate", p -> new PressurePlateBlock(BOPBlockSetTypes.ORIGIN_OAK, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(ORIGIN_OAK_PLANKS.defaultMapColor()).noCollision().strength(0.5F));
        ORIGIN_OAK_BUTTON = register(func, "origin_oak_button", p -> new ButtonBlock(BOPBlockSetTypes.ORIGIN_OAK, 30, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).noCollision().strength(0.5F));
        ORIGIN_OAK_SHELF = register(func, "origin_oak_shelf", ShelfBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).sound(SoundType.SHELF).ignitedByLava().strength(2.0F, 3.0F));
        ORIGIN_OAK_SIGN = register(func, "origin_oak_sign", p -> new StandingSignBlockBOP(BOPWoodTypes.ORIGIN_OAK, p), BlockBehaviour.Properties.of().mapColor(ORIGIN_OAK_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        ORIGIN_OAK_WALL_SIGN = register(func, "origin_oak_wall_sign", p -> new WallSignBlockBOP(BOPWoodTypes.ORIGIN_OAK, p), wallVariant(ORIGIN_OAK_SIGN, true).mapColor(ORIGIN_OAK_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        ORIGIN_OAK_HANGING_SIGN = register(func, "origin_oak_hanging_sign", p -> new CeilingHangingSignBlockBOP(BOPWoodTypes.ORIGIN_OAK, p), BlockBehaviour.Properties.of().mapColor(ORIGIN_OAK_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        ORIGIN_OAK_WALL_HANGING_SIGN = register(func, "origin_oak_wall_hanging_sign", p -> new WallHangingSignBlockBOP(BOPWoodTypes.ORIGIN_OAK, p), wallVariant(ORIGIN_OAK_HANGING_SIGN, true).mapColor(ORIGIN_OAK_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));

        FIR_SAPLING = register(func, "fir_sapling", p -> new SaplingBlockBOP(BOPTreeGrowers.FIR, p), BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).noCollision().randomTicks().instabreak().sound(SoundType.GRASS));
        FIR_LEAVES = register(func, "fir_leaves", p -> new UntintedParticleLeavesBlock(0.001F, ModParticles.FIR_LEAVES, p), BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn(ModBlocks::ocelotOrParrot).isSuffocating(ModBlocks::never).isViewBlocking(ModBlocks::never).ignitedByLava().isRedstoneConductor(ModBlocks::never));
        FIR_LOG = register(func, "fir_log", RotatedPillarBlock::new, logProperties(MapColor.TERRACOTTA_WHITE, MapColor.TERRACOTTA_LIGHT_GRAY, SoundType.WOOD));
        FIR_WOOD = register(func, "fir_wood", RotatedPillarBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_LIGHT_GRAY).strength(2.0F).sound(SoundType.WOOD));
        STRIPPED_FIR_LOG = register(func, "stripped_fir_log", RotatedPillarBlock::new, logProperties(MapColor.TERRACOTTA_WHITE, MapColor.TERRACOTTA_WHITE, SoundType.WOOD));
        STRIPPED_FIR_WOOD = register(func, "stripped_fir_wood", RotatedPillarBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_WHITE).strength(2.0F).sound(SoundType.WOOD));
        FIR_PLANKS = register(func, "fir_planks", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_WHITE).strength(2.0F, 3.0F).sound(SoundType.WOOD));
        FIR_STAIRS = register(func, "fir_stairs", p -> new StairBlock(FIR_PLANKS.defaultBlockState(), p), Block.Properties.ofFullCopy(FIR_PLANKS));
        FIR_SLAB = register(func, "fir_slab", SlabBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_WHITE).strength(2.0F, 3.0F).sound(SoundType.WOOD));
        FIR_FENCE = register(func, "fir_fence", FenceBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(FIR_PLANKS.defaultMapColor()).strength(2.0F, 3.0F).sound(SoundType.WOOD));
        FIR_FENCE_GATE = register(func, "fir_fence_gate", p -> new FenceGateBlock(BOPWoodTypes.FIR, p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(FIR_PLANKS.defaultMapColor()).strength(2.0F, 3.0F));
        FIR_DOOR = register(func, "fir_door", p -> new DoorBlock(BOPBlockSetTypes.FIR, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(FIR_PLANKS.defaultMapColor()).strength(3.0F).noOcclusion());
        FIR_TRAPDOOR = register(func, "fir_trapdoor", p -> new TrapDoorBlock(BOPBlockSetTypes.FIR, p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_WHITE).strength(3.0F).noOcclusion());
        FIR_PRESSURE_PLATE = register(func, "fir_pressure_plate", p -> new PressurePlateBlock(BOPBlockSetTypes.FIR, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(FIR_PLANKS.defaultMapColor()).noCollision().strength(0.5F));
        FIR_BUTTON = register(func, "fir_button", p -> new ButtonBlock(BOPBlockSetTypes.FIR, 30, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).noCollision().strength(0.5F));
        FIR_SHELF = register(func, "fir_shelf", ShelfBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_WHITE).instrument(NoteBlockInstrument.BASS).sound(SoundType.SHELF).ignitedByLava().strength(2.0F, 3.0F));
        FIR_SIGN = register(func, "fir_sign", p -> new StandingSignBlockBOP(BOPWoodTypes.FIR, p), BlockBehaviour.Properties.of().mapColor(FIR_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        FIR_WALL_SIGN = register(func, "fir_wall_sign", p -> new WallSignBlockBOP(BOPWoodTypes.FIR, p), wallVariant(FIR_SIGN, true).mapColor(FIR_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        FIR_HANGING_SIGN = register(func, "fir_hanging_sign", p -> new CeilingHangingSignBlockBOP(BOPWoodTypes.FIR, p), BlockBehaviour.Properties.of().mapColor(FIR_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        FIR_WALL_HANGING_SIGN = register(func, "fir_wall_hanging_sign", p -> new WallHangingSignBlockBOP(BOPWoodTypes.FIR, p), wallVariant(FIR_HANGING_SIGN, true).mapColor(FIR_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));

        PINE_SAPLING = register(func, "pine_sapling", p -> new SaplingBlockBOP(BOPTreeGrowers.PINE, p), BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).noCollision().randomTicks().instabreak().sound(SoundType.GRASS));
        PINE_LEAVES = register(func, "pine_leaves", p -> new TintedParticleLeavesBlock(0.0025F, p), BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn(ModBlocks::ocelotOrParrot).isSuffocating(ModBlocks::never).isViewBlocking(ModBlocks::never).ignitedByLava().isRedstoneConductor(ModBlocks::never));
        PINE_LOG = register(func, "pine_log", RotatedPillarBlock::new, logProperties(MapColor.TERRACOTTA_LIGHT_GREEN, MapColor.DIRT, SoundType.WOOD));
        PINE_WOOD = register(func, "pine_wood", RotatedPillarBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.DIRT).strength(2.0F).sound(SoundType.WOOD));
        STRIPPED_PINE_LOG = register(func, "stripped_pine_log", RotatedPillarBlock::new, logProperties(MapColor.TERRACOTTA_LIGHT_GREEN, MapColor.TERRACOTTA_LIGHT_GREEN, SoundType.WOOD));
        STRIPPED_PINE_WOOD = register(func, "stripped_pine_wood", RotatedPillarBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_LIGHT_GREEN).strength(2.0F).sound(SoundType.WOOD));
        PINE_PLANKS = register(func, "pine_planks", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_LIGHT_GREEN).strength(2.0F, 3.0F).sound(SoundType.WOOD));
        PINE_STAIRS = register(func, "pine_stairs", p -> new StairBlock(PINE_PLANKS.defaultBlockState(), p), Block.Properties.ofFullCopy(PINE_PLANKS));
        PINE_SLAB = register(func, "pine_slab", SlabBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_LIGHT_GREEN).strength(2.0F, 3.0F).sound(SoundType.WOOD));
        PINE_FENCE = register(func, "pine_fence", FenceBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(PINE_PLANKS.defaultMapColor()).strength(2.0F, 3.0F).sound(SoundType.WOOD));
        PINE_FENCE_GATE = register(func, "pine_fence_gate", p -> new FenceGateBlock(BOPWoodTypes.PINE, p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(PINE_PLANKS.defaultMapColor()).strength(2.0F, 3.0F));
        PINE_DOOR = register(func, "pine_door", p -> new DoorBlock(BOPBlockSetTypes.PINE, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(PINE_PLANKS.defaultMapColor()).strength(3.0F).noOcclusion());
        PINE_TRAPDOOR = register(func, "pine_trapdoor", p -> new TrapDoorBlock(BOPBlockSetTypes.PINE, p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_LIGHT_GREEN).strength(3.0F).noOcclusion());
        PINE_PRESSURE_PLATE = register(func, "pine_pressure_plate", p -> new PressurePlateBlock(BOPBlockSetTypes.PINE, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(PINE_PLANKS.defaultMapColor()).noCollision().strength(0.5F));
        PINE_BUTTON = register(func, "pine_button", p -> new ButtonBlock(BOPBlockSetTypes.PINE, 30, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).noCollision().strength(0.5F));
        PINE_SHELF = register(func, "pine_shelf", ShelfBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_LIGHT_GREEN).instrument(NoteBlockInstrument.BASS).sound(SoundType.SHELF).ignitedByLava().strength(2.0F, 3.0F));
        PINE_SIGN = register(func, "pine_sign", p -> new StandingSignBlockBOP(BOPWoodTypes.PINE, p), BlockBehaviour.Properties.of().mapColor(PINE_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        PINE_WALL_SIGN = register(func, "pine_wall_sign", p -> new WallSignBlockBOP(BOPWoodTypes.PINE, p), wallVariant(PINE_SIGN, true).mapColor(PINE_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        PINE_HANGING_SIGN = register(func, "pine_hanging_sign", p -> new CeilingHangingSignBlockBOP(BOPWoodTypes.PINE, p), BlockBehaviour.Properties.of().mapColor(PINE_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        PINE_WALL_HANGING_SIGN = register(func, "pine_wall_hanging_sign", p -> new WallHangingSignBlockBOP(BOPWoodTypes.PINE, p), wallVariant(PINE_HANGING_SIGN, true).mapColor(PINE_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));

        RED_MAPLE_SAPLING = register(func, "red_maple_sapling", p -> new SaplingBlockBOP(BOPTreeGrowers.RED_MAPLE, p), BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_RED).pushReaction(PushReaction.DESTROY).noCollision().randomTicks().instabreak().sound(SoundType.CHERRY_SAPLING));
        RED_MAPLE_LEAF_LITTER = register(func, "red_maple_leaf_litter", LeafLitterBlock::new, BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).mapColor(MapColor.COLOR_RED).replaceable().noCollision().sound(SoundType.LEAF_LITTER));
        RED_MAPLE_LEAVES = register(func, "red_maple_leaves", p -> new UntintedParticleLeavesBlock(0.005F, ModParticles.RED_MAPLE_LEAVES, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.COLOR_RED).strength(0.2F).randomTicks().sound(SoundType.CHERRY_LEAVES).noOcclusion().isValidSpawn(ModBlocks::ocelotOrParrot).isSuffocating(ModBlocks::never).isViewBlocking(ModBlocks::never).ignitedByLava().isRedstoneConductor(ModBlocks::never));
        ORANGE_MAPLE_SAPLING = register(func, "orange_maple_sapling", p -> new SaplingBlockBOP(BOPTreeGrowers.ORANGE_MAPLE, p), BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_ORANGE).pushReaction(PushReaction.DESTROY).noCollision().randomTicks().instabreak().sound(SoundType.CHERRY_SAPLING));
        ORANGE_MAPLE_LEAF_LITTER = register(func, "orange_maple_leaf_litter", LeafLitterBlock::new, BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).mapColor(MapColor.TERRACOTTA_ORANGE).replaceable().noCollision().sound(SoundType.LEAF_LITTER));
        ORANGE_MAPLE_LEAVES = register(func, "orange_maple_leaves", p -> new UntintedParticleLeavesBlock(0.01F, ModParticles.ORANGE_MAPLE_LEAVES, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.TERRACOTTA_ORANGE).strength(0.2F).randomTicks().sound(SoundType.CHERRY_LEAVES).noOcclusion().isValidSpawn(ModBlocks::ocelotOrParrot).isSuffocating(ModBlocks::never).isViewBlocking(ModBlocks::never).ignitedByLava().isRedstoneConductor(ModBlocks::never));
        YELLOW_MAPLE_SAPLING = register(func, "yellow_maple_sapling", p -> new SaplingBlockBOP(BOPTreeGrowers.YELLOW_MAPLE, p), BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_YELLOW).pushReaction(PushReaction.DESTROY).noCollision().randomTicks().instabreak().sound(SoundType.CHERRY_SAPLING));
        YELLOW_MAPLE_LEAF_LITTER = register(func, "yellow_maple_leaf_litter", LeafLitterBlock::new, BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).mapColor(MapColor.TERRACOTTA_YELLOW).replaceable().noCollision().sound(SoundType.LEAF_LITTER));
        YELLOW_MAPLE_LEAVES = register(func, "yellow_maple_leaves", p -> new UntintedParticleLeavesBlock(0.05F, ModParticles.YELLOW_MAPLE_LEAVES, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.TERRACOTTA_YELLOW).strength(0.2F).randomTicks().sound(SoundType.CHERRY_LEAVES).noOcclusion().isValidSpawn(ModBlocks::ocelotOrParrot).isSuffocating(ModBlocks::never).isViewBlocking(ModBlocks::never).ignitedByLava().isRedstoneConductor(ModBlocks::never));
        MAPLE_LOG = register(func, "maple_log", RotatedPillarBlock::new, logProperties(MapColor.DIRT, MapColor.TERRACOTTA_BROWN, SoundType.CHERRY_WOOD));
        MAPLE_WOOD = register(func, "maple_wood", RotatedPillarBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_BROWN).strength(2.0F).sound(SoundType.CHERRY_WOOD));
        STRIPPED_MAPLE_LOG = register(func, "stripped_maple_log", RotatedPillarBlock::new, logProperties(MapColor.DIRT, MapColor.DIRT, SoundType.CHERRY_WOOD));
        STRIPPED_MAPLE_WOOD = register(func, "stripped_maple_wood", RotatedPillarBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.DIRT).strength(2.0F).sound(SoundType.CHERRY_WOOD));
        MAPLE_PLANKS = register(func, "maple_planks", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.DIRT).strength(2.0F, 3.0F).sound(SoundType.CHERRY_WOOD));
        MAPLE_STAIRS = register(func, "maple_stairs", p -> new StairBlock(MAPLE_PLANKS.defaultBlockState(), p), Block.Properties.ofFullCopy(MAPLE_PLANKS));
        MAPLE_SLAB = register(func, "maple_slab", SlabBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.DIRT).strength(2.0F, 3.0F).sound(SoundType.CHERRY_WOOD));
        MAPLE_FENCE = register(func, "maple_fence", FenceBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(MAPLE_PLANKS.defaultMapColor()).strength(2.0F, 3.0F).sound(SoundType.CHERRY_WOOD));
        MAPLE_FENCE_GATE = register(func, "maple_fence_gate", p -> new FenceGateBlock(BOPWoodTypes.MAPLE, p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(MAPLE_PLANKS.defaultMapColor()).strength(2.0F, 3.0F));
        MAPLE_DOOR = register(func, "maple_door", p -> new DoorBlock(BOPBlockSetTypes.MAPLE, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MAPLE_PLANKS.defaultMapColor()).strength(3.0F).noOcclusion());
        MAPLE_TRAPDOOR = register(func, "maple_trapdoor", p -> new TrapDoorBlock(BOPBlockSetTypes.MAPLE, p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.DIRT).strength(3.0F).noOcclusion());
        MAPLE_PRESSURE_PLATE = register(func, "maple_pressure_plate", p -> new PressurePlateBlock(BOPBlockSetTypes.MAPLE, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(MAPLE_PLANKS.defaultMapColor()).noCollision().strength(0.5F));
        MAPLE_BUTTON = register(func, "maple_button", p -> new ButtonBlock(BOPBlockSetTypes.MAPLE, 30, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).noCollision().strength(0.5F));
        MAPLE_SHELF = register(func, "maple_shelf", ShelfBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.DIRT).instrument(NoteBlockInstrument.BASS).sound(SoundType.SHELF).ignitedByLava().strength(2.0F, 3.0F));
        MAPLE_SIGN = register(func, "maple_sign", p -> new StandingSignBlockBOP(BOPWoodTypes.MAPLE, p), BlockBehaviour.Properties.of().mapColor(MAPLE_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        MAPLE_WALL_SIGN = register(func, "maple_wall_sign", p -> new WallSignBlockBOP(BOPWoodTypes.MAPLE, p), wallVariant(MAPLE_SIGN, true).mapColor(MAPLE_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        MAPLE_HANGING_SIGN = register(func, "maple_hanging_sign", p -> new CeilingHangingSignBlockBOP(BOPWoodTypes.MAPLE, p), BlockBehaviour.Properties.of().mapColor(MAPLE_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        MAPLE_WALL_HANGING_SIGN = register(func, "maple_wall_hanging_sign", p -> new WallHangingSignBlockBOP(BOPWoodTypes.MAPLE, p), wallVariant(MAPLE_HANGING_SIGN, true).mapColor(MAPLE_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));

        REDWOOD_SAPLING = register(func, "redwood_sapling", p -> new SaplingBlockBOP(BOPTreeGrowers.REDWOOD, p), BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).noCollision().randomTicks().instabreak().sound(SoundType.GRASS));
        REDWOOD_LEAVES = register(func, "redwood_leaves", p -> new UntintedParticleLeavesBlock(0.001F, ModParticles.REDWOOD_LEAVES, p), BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn(ModBlocks::ocelotOrParrot).isSuffocating(ModBlocks::never).isViewBlocking(ModBlocks::never).ignitedByLava().isRedstoneConductor(ModBlocks::never));
        REDWOOD_LOG = register(func, "redwood_log", RotatedPillarBlock::new, logProperties(MapColor.CRIMSON_NYLIUM, MapColor.TERRACOTTA_ORANGE, SoundType.WOOD));
        REDWOOD_WOOD = register(func, "redwood_wood", RotatedPillarBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_ORANGE).strength(2.0F).sound(SoundType.WOOD));
        STRIPPED_REDWOOD_LOG = register(func, "stripped_redwood_log", RotatedPillarBlock::new, logProperties(MapColor.CRIMSON_NYLIUM, MapColor.CRIMSON_NYLIUM, SoundType.WOOD));
        STRIPPED_REDWOOD_WOOD = register(func, "stripped_redwood_wood", RotatedPillarBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.CRIMSON_NYLIUM).strength(2.0F).sound(SoundType.WOOD));
        REDWOOD_PLANKS = register(func, "redwood_planks", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.CRIMSON_NYLIUM).strength(2.0F, 3.0F).sound(SoundType.WOOD));
        REDWOOD_STAIRS = register(func, "redwood_stairs", p -> new StairBlock(REDWOOD_PLANKS.defaultBlockState(), p), Block.Properties.ofFullCopy(REDWOOD_PLANKS));
        REDWOOD_SLAB = register(func, "redwood_slab", SlabBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.CRIMSON_NYLIUM).strength(2.0F, 3.0F).sound(SoundType.WOOD));
        REDWOOD_FENCE = register(func, "redwood_fence", FenceBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(REDWOOD_PLANKS.defaultMapColor()).strength(2.0F, 3.0F).sound(SoundType.WOOD));
        REDWOOD_FENCE_GATE = register(func, "redwood_fence_gate", p -> new FenceGateBlock(BOPWoodTypes.REDWOOD, p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(REDWOOD_PLANKS.defaultMapColor()).strength(2.0F, 3.0F));
        REDWOOD_DOOR = register(func, "redwood_door", p -> new DoorBlock(BOPBlockSetTypes.REDWOOD, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(REDWOOD_PLANKS.defaultMapColor()).strength(3.0F).noOcclusion());
        REDWOOD_TRAPDOOR = register(func, "redwood_trapdoor", p -> new TrapDoorBlock(BOPBlockSetTypes.REDWOOD, p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.CRIMSON_NYLIUM).strength(3.0F).noOcclusion());
        REDWOOD_PRESSURE_PLATE = register(func, "redwood_pressure_plate", p -> new PressurePlateBlock(BOPBlockSetTypes.REDWOOD, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(REDWOOD_PLANKS.defaultMapColor()).noCollision().strength(0.5F));
        REDWOOD_BUTTON = register(func, "redwood_button", p -> new ButtonBlock(BOPBlockSetTypes.REDWOOD, 30, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).noCollision().strength(0.5F));
        REDWOOD_SHELF = register(func, "redwood_shelf", ShelfBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.CRIMSON_NYLIUM).instrument(NoteBlockInstrument.BASS).sound(SoundType.SHELF).ignitedByLava().strength(2.0F, 3.0F));
        REDWOOD_SIGN = register(func, "redwood_sign", p -> new StandingSignBlockBOP(BOPWoodTypes.REDWOOD, p), BlockBehaviour.Properties.of().mapColor(REDWOOD_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        REDWOOD_WALL_SIGN = register(func, "redwood_wall_sign", p -> new WallSignBlockBOP(BOPWoodTypes.REDWOOD, p), wallVariant(REDWOOD_SIGN, true).mapColor(REDWOOD_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        REDWOOD_HANGING_SIGN = register(func, "redwood_hanging_sign", p -> new CeilingHangingSignBlockBOP(BOPWoodTypes.REDWOOD, p), BlockBehaviour.Properties.of().mapColor(REDWOOD_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        REDWOOD_WALL_HANGING_SIGN = register(func, "redwood_wall_hanging_sign", p -> new WallHangingSignBlockBOP(BOPWoodTypes.REDWOOD, p), wallVariant(REDWOOD_HANGING_SIGN, true).mapColor(REDWOOD_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));

        MAHOGANY_SAPLING = register(func, "mahogany_sapling", p -> new SaplingBlockBOP(BOPTreeGrowers.MAHOGANY, p), BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).noCollision().randomTicks().instabreak().sound(SoundType.GRASS));
        MAHOGANY_LEAVES = register(func, "mahogany_leaves", p -> new TintedParticleLeavesBlock(0.01F, p), BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn(ModBlocks::ocelotOrParrot).isSuffocating(ModBlocks::never).isViewBlocking(ModBlocks::never).ignitedByLava().isRedstoneConductor(ModBlocks::never));
        MAHOGANY_LOG = register(func, "mahogany_log", RotatedPillarBlock::new, logProperties(MapColor.TERRACOTTA_MAGENTA, MapColor.DIRT, SoundType.WOOD));
        MAHOGANY_WOOD = register(func, "mahogany_wood", RotatedPillarBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.DIRT).strength(2.0F).sound(SoundType.WOOD));
        STRIPPED_MAHOGANY_LOG = register(func, "stripped_mahogany_log", RotatedPillarBlock::new, logProperties(MapColor.TERRACOTTA_MAGENTA, MapColor.TERRACOTTA_MAGENTA, SoundType.WOOD));
        STRIPPED_MAHOGANY_WOOD = register(func, "stripped_mahogany_wood", RotatedPillarBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_MAGENTA).strength(2.0F).sound(SoundType.WOOD));
        MAHOGANY_PLANKS = register(func, "mahogany_planks", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_MAGENTA).strength(2.0F, 3.0F).sound(SoundType.WOOD));
        MAHOGANY_STAIRS = register(func, "mahogany_stairs", p -> new StairBlock(MAHOGANY_PLANKS.defaultBlockState(), p), Block.Properties.ofFullCopy(MAHOGANY_PLANKS));
        MAHOGANY_SLAB = register(func, "mahogany_slab", SlabBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_MAGENTA).strength(2.0F, 3.0F).sound(SoundType.WOOD));
        MAHOGANY_FENCE = register(func, "mahogany_fence", FenceBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(MAHOGANY_PLANKS.defaultMapColor()).strength(2.0F, 3.0F).sound(SoundType.WOOD));
        MAHOGANY_FENCE_GATE = register(func, "mahogany_fence_gate", p -> new FenceGateBlock(BOPWoodTypes.MAHOGANY, p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(MAHOGANY_PLANKS.defaultMapColor()).strength(2.0F, 3.0F));
        MAHOGANY_DOOR = register(func, "mahogany_door", p -> new DoorBlock(BOPBlockSetTypes.MAHOGANY, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MAHOGANY_PLANKS.defaultMapColor()).strength(3.0F).noOcclusion());
        MAHOGANY_TRAPDOOR = register(func, "mahogany_trapdoor", p -> new TrapDoorBlock(BOPBlockSetTypes.MAHOGANY, p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_MAGENTA).strength(3.0F).noOcclusion());
        MAHOGANY_PRESSURE_PLATE = register(func, "mahogany_pressure_plate", p -> new PressurePlateBlock(BOPBlockSetTypes.MAHOGANY, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(MAHOGANY_PLANKS.defaultMapColor()).noCollision().strength(0.5F));
        MAHOGANY_BUTTON = register(func, "mahogany_button", p -> new ButtonBlock(BOPBlockSetTypes.MAHOGANY, 30, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).noCollision().strength(0.5F));
        MAHOGANY_SHELF = register(func, "mahogany_shelf", ShelfBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_MAGENTA).instrument(NoteBlockInstrument.BASS).sound(SoundType.SHELF).ignitedByLava().strength(2.0F, 3.0F));
        MAHOGANY_SIGN = register(func, "mahogany_sign", p -> new StandingSignBlockBOP(BOPWoodTypes.MAHOGANY, p), BlockBehaviour.Properties.of().mapColor(MAHOGANY_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        MAHOGANY_WALL_SIGN = register(func, "mahogany_wall_sign", p -> new WallSignBlockBOP(BOPWoodTypes.MAHOGANY, p), wallVariant(MAHOGANY_SIGN, true).mapColor(MAHOGANY_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        MAHOGANY_HANGING_SIGN = register(func, "mahogany_hanging_sign", p -> new CeilingHangingSignBlockBOP(BOPWoodTypes.MAHOGANY, p), BlockBehaviour.Properties.of().mapColor(MAHOGANY_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        MAHOGANY_WALL_HANGING_SIGN = register(func, "mahogany_wall_hanging_sign", p -> new WallHangingSignBlockBOP(BOPWoodTypes.MAHOGANY, p), wallVariant(MAHOGANY_HANGING_SIGN, true).mapColor(MAHOGANY_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));

        JACARANDA_SAPLING = register(func, "jacaranda_sapling", p -> new SaplingBlockBOP(BOPTreeGrowers.JACARANDA, p), BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_PURPLE).pushReaction(PushReaction.DESTROY).noCollision().randomTicks().instabreak().sound(SoundType.CHERRY_SAPLING));
        JACARANDA_LEAVES = register(func, "jacaranda_leaves", p -> new UntintedParticleLeavesBlock(0.05F, ModParticles.JACARANDA_LEAVES, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.COLOR_PURPLE).strength(0.2F).randomTicks().sound(SoundType.CHERRY_LEAVES).noOcclusion().isValidSpawn(ModBlocks::ocelotOrParrot).isSuffocating(ModBlocks::never).isViewBlocking(ModBlocks::never).ignitedByLava().isRedstoneConductor(ModBlocks::never));
        JACARANDA_LOG = register(func, "jacaranda_log", RotatedPillarBlock::new, logProperties(MapColor.QUARTZ, MapColor.TERRACOTTA_LIGHT_GRAY, SoundType.CHERRY_WOOD));
        JACARANDA_WOOD = register(func, "jacaranda_wood", RotatedPillarBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_LIGHT_GRAY).strength(2.0F).sound(SoundType.CHERRY_WOOD));
        STRIPPED_JACARANDA_LOG = register(func, "stripped_jacaranda_log", RotatedPillarBlock::new, logProperties(MapColor.QUARTZ, MapColor.QUARTZ, SoundType.CHERRY_WOOD));
        STRIPPED_JACARANDA_WOOD = register(func, "stripped_jacaranda_wood", RotatedPillarBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.QUARTZ).strength(2.0F).sound(SoundType.CHERRY_WOOD));
        JACARANDA_PLANKS = register(func, "jacaranda_planks", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.QUARTZ).strength(2.0F, 3.0F).sound(SoundType.CHERRY_WOOD));
        JACARANDA_STAIRS = register(func, "jacaranda_stairs", p -> new StairBlock(JACARANDA_PLANKS.defaultBlockState(), p), Block.Properties.ofFullCopy(JACARANDA_PLANKS));
        JACARANDA_SLAB = register(func, "jacaranda_slab", SlabBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.QUARTZ).strength(2.0F, 3.0F).sound(SoundType.CHERRY_WOOD));
        JACARANDA_FENCE = register(func, "jacaranda_fence", FenceBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(JACARANDA_PLANKS.defaultMapColor()).strength(2.0F, 3.0F).sound(SoundType.CHERRY_WOOD));
        JACARANDA_FENCE_GATE = register(func, "jacaranda_fence_gate", p -> new FenceGateBlock(BOPWoodTypes.JACARANDA, p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(JACARANDA_PLANKS.defaultMapColor()).strength(2.0F, 3.0F));
        JACARANDA_DOOR = register(func, "jacaranda_door", p -> new DoorBlock(BOPBlockSetTypes.JACARANDA, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(JACARANDA_PLANKS.defaultMapColor()).strength(3.0F).noOcclusion());
        JACARANDA_TRAPDOOR = register(func, "jacaranda_trapdoor", p -> new TrapDoorBlock(BOPBlockSetTypes.JACARANDA, p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.QUARTZ).strength(3.0F).noOcclusion());
        JACARANDA_PRESSURE_PLATE = register(func, "jacaranda_pressure_plate", p -> new PressurePlateBlock(BOPBlockSetTypes.JACARANDA, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(JACARANDA_PLANKS.defaultMapColor()).noCollision().strength(0.5F));
        JACARANDA_BUTTON = register(func, "jacaranda_button", p -> new ButtonBlock(BOPBlockSetTypes.JACARANDA, 30, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).noCollision().strength(0.5F));
        JACARANDA_SHELF = register(func, "jacaranda_shelf", ShelfBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.QUARTZ).instrument(NoteBlockInstrument.BASS).sound(SoundType.SHELF).ignitedByLava().strength(2.0F, 3.0F));
        JACARANDA_SIGN = register(func, "jacaranda_sign", p -> new StandingSignBlockBOP(BOPWoodTypes.JACARANDA, p), BlockBehaviour.Properties.of().mapColor(JACARANDA_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        JACARANDA_WALL_SIGN = register(func, "jacaranda_wall_sign", p -> new WallSignBlockBOP(BOPWoodTypes.JACARANDA, p), wallVariant(JACARANDA_SIGN, true).mapColor(JACARANDA_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        JACARANDA_HANGING_SIGN = register(func, "jacaranda_hanging_sign", p -> new CeilingHangingSignBlockBOP(BOPWoodTypes.JACARANDA, p), BlockBehaviour.Properties.of().mapColor(JACARANDA_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        JACARANDA_WALL_HANGING_SIGN = register(func, "jacaranda_wall_hanging_sign", p -> new WallHangingSignBlockBOP(BOPWoodTypes.JACARANDA, p), wallVariant(JACARANDA_HANGING_SIGN, true).mapColor(JACARANDA_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));

        PALM_SAPLING = register(func, "palm_sapling", p -> new SaplingBlockBOP(BOPTreeGrowers.PALM, p), BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).noCollision().randomTicks().instabreak().sound(SoundType.GRASS));
        PALM_LEAVES = register(func, "palm_leaves", p -> new TintedParticleLeavesBlock(0.0075F, p), BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn(ModBlocks::ocelotOrParrot).isSuffocating(ModBlocks::never).isViewBlocking(ModBlocks::never).ignitedByLava().isRedstoneConductor(ModBlocks::never));
        PALM_LOG = register(func, "palm_log", RotatedPillarBlock::new, logProperties(MapColor.TERRACOTTA_YELLOW, MapColor.PODZOL, SoundType.WOOD));
        PALM_WOOD = register(func, "palm_wood", RotatedPillarBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.PODZOL).strength(2.0F).sound(SoundType.WOOD));
        STRIPPED_PALM_LOG = register(func, "stripped_palm_log", RotatedPillarBlock::new, logProperties(MapColor.TERRACOTTA_YELLOW, MapColor.TERRACOTTA_YELLOW, SoundType.WOOD));
        STRIPPED_PALM_WOOD = register(func, "stripped_palm_wood", RotatedPillarBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_YELLOW).strength(2.0F).sound(SoundType.WOOD));
        PALM_PLANKS = register(func, "palm_planks", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_YELLOW).strength(2.0F, 3.0F).sound(SoundType.WOOD));
        PALM_STAIRS = register(func, "palm_stairs", p -> new StairBlock(PALM_PLANKS.defaultBlockState(), p), Block.Properties.ofFullCopy(PALM_PLANKS));
        PALM_SLAB = register(func, "palm_slab", SlabBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_YELLOW).strength(2.0F, 3.0F).sound(SoundType.WOOD));
        PALM_FENCE = register(func, "palm_fence", FenceBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(PALM_PLANKS.defaultMapColor()).strength(2.0F, 3.0F).sound(SoundType.WOOD));
        PALM_FENCE_GATE = register(func, "palm_fence_gate", p -> new FenceGateBlock(BOPWoodTypes.PALM, p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(PALM_PLANKS.defaultMapColor()).strength(2.0F, 3.0F));
        PALM_DOOR = register(func, "palm_door", p -> new DoorBlock(BOPBlockSetTypes.PALM, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(PALM_PLANKS.defaultMapColor()).strength(3.0F).noOcclusion());
        PALM_TRAPDOOR = register(func, "palm_trapdoor", p -> new TrapDoorBlock(BOPBlockSetTypes.PALM, p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_YELLOW).strength(3.0F).noOcclusion());
        PALM_PRESSURE_PLATE = register(func, "palm_pressure_plate", p -> new PressurePlateBlock(BOPBlockSetTypes.PALM, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(PALM_PLANKS.defaultMapColor()).noCollision().strength(0.5F));
        PALM_BUTTON = register(func, "palm_button", p -> new ButtonBlock(BOPBlockSetTypes.PALM, 30, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).noCollision().strength(0.5F));
        PALM_SHELF = register(func, "palm_shelf", ShelfBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_YELLOW).instrument(NoteBlockInstrument.BASS).sound(SoundType.SHELF).ignitedByLava().strength(2.0F, 3.0F));
        PALM_SIGN = register(func, "palm_sign", p -> new StandingSignBlockBOP(BOPWoodTypes.PALM, p), BlockBehaviour.Properties.of().mapColor(PALM_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        PALM_WALL_SIGN = register(func, "palm_wall_sign", p -> new WallSignBlockBOP(BOPWoodTypes.PALM, p), wallVariant(PALM_SIGN, true).mapColor(PALM_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        PALM_HANGING_SIGN = register(func, "palm_hanging_sign", p -> new CeilingHangingSignBlockBOP(BOPWoodTypes.PALM, p), BlockBehaviour.Properties.of().mapColor(PALM_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        PALM_WALL_HANGING_SIGN = register(func, "palm_wall_hanging_sign", p -> new WallHangingSignBlockBOP(BOPWoodTypes.PALM, p), wallVariant(PALM_HANGING_SIGN, true).mapColor(PALM_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));

        WILLOW_SAPLING = register(func, "willow_sapling", p -> new SaplingBlockBOP(BOPTreeGrowers.WILLOW, p), BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).noCollision().randomTicks().instabreak().sound(SoundType.GRASS));
        WILLOW_VINE = register(func, "willow_vine", VineBlock::new, BlockBehaviour.Properties.of().randomTicks().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).replaceable().ignitedByLava().noCollision().strength(0.2F).sound(SoundType.GRASS));
        SPANISH_MOSS = register(func, "spanish_moss", SpanishMossBottomBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).replaceable().ignitedByLava().randomTicks().noCollision().instabreak().sound(SoundType.GRASS));
        SPANISH_MOSS_PLANT = register(func, "spanish_moss_plant", SpanishMossBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).replaceable().ignitedByLava().noCollision().instabreak().sound(SoundType.GRASS));
        WILLOW_LEAVES = register(func, "willow_leaves", p -> new TintedParticleLeavesBlock(0.0075F, p), BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn(ModBlocks::ocelotOrParrot).isSuffocating(ModBlocks::never).isViewBlocking(ModBlocks::never).ignitedByLava().isRedstoneConductor(ModBlocks::never));
        WILLOW_LOG = register(func, "willow_log", RotatedPillarBlock::new, logProperties(MapColor.TERRACOTTA_LIGHT_GREEN, MapColor.TERRACOTTA_LIGHT_GREEN, SoundType.WOOD));
        WILLOW_WOOD = register(func, "willow_wood", RotatedPillarBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_LIGHT_GREEN).strength(2.0F).sound(SoundType.WOOD));
        STRIPPED_WILLOW_LOG = register(func, "stripped_willow_log", RotatedPillarBlock::new, logProperties(MapColor.TERRACOTTA_LIGHT_GREEN, MapColor.TERRACOTTA_LIGHT_GREEN, SoundType.WOOD));
        STRIPPED_WILLOW_WOOD = register(func, "stripped_willow_wood", RotatedPillarBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_LIGHT_GREEN).strength(2.0F).sound(SoundType.WOOD));
        WILLOW_PLANKS = register(func, "willow_planks", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_LIGHT_GREEN).strength(2.0F, 3.0F).sound(SoundType.WOOD));
        WILLOW_STAIRS = register(func, "willow_stairs", p -> new StairBlock(WILLOW_PLANKS.defaultBlockState(), p), Block.Properties.ofFullCopy(WILLOW_PLANKS));
        WILLOW_SLAB = register(func, "willow_slab", SlabBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_LIGHT_GREEN).strength(2.0F, 3.0F).sound(SoundType.WOOD));
        WILLOW_FENCE = register(func, "willow_fence", FenceBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(WILLOW_PLANKS.defaultMapColor()).strength(2.0F, 3.0F).sound(SoundType.WOOD));
        WILLOW_FENCE_GATE = register(func, "willow_fence_gate", p -> new FenceGateBlock(BOPWoodTypes.WILLOW, p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(WILLOW_PLANKS.defaultMapColor()).strength(2.0F, 3.0F));
        WILLOW_DOOR = register(func, "willow_door", p -> new DoorBlock(BOPBlockSetTypes.WILLOW, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(WILLOW_PLANKS.defaultMapColor()).strength(3.0F).noOcclusion());
        WILLOW_TRAPDOOR = register(func, "willow_trapdoor", p -> new TrapDoorBlock(BOPBlockSetTypes.WILLOW, p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_LIGHT_GREEN).strength(3.0F).noOcclusion());
        WILLOW_PRESSURE_PLATE = register(func, "willow_pressure_plate", p -> new PressurePlateBlock(BOPBlockSetTypes.WILLOW, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(WILLOW_PLANKS.defaultMapColor()).noCollision().strength(0.5F));
        WILLOW_BUTTON = register(func, "willow_button", p -> new ButtonBlock(BOPBlockSetTypes.WILLOW, 30, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).noCollision().strength(0.5F));
        WILLOW_SHELF = register(func, "willow_shelf", ShelfBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_LIGHT_GREEN).instrument(NoteBlockInstrument.BASS).sound(SoundType.SHELF).ignitedByLava().strength(2.0F, 3.0F));
        WILLOW_SIGN = register(func, "willow_sign", p -> new StandingSignBlockBOP(BOPWoodTypes.WILLOW, p), BlockBehaviour.Properties.of().mapColor(WILLOW_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        WILLOW_WALL_SIGN = register(func, "willow_wall_sign", p -> new WallSignBlockBOP(BOPWoodTypes.WILLOW, p), wallVariant(WILLOW_SIGN, true).mapColor(WILLOW_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        WILLOW_HANGING_SIGN = register(func, "willow_hanging_sign", p -> new CeilingHangingSignBlockBOP(BOPWoodTypes.WILLOW, p), BlockBehaviour.Properties.of().mapColor(WILLOW_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        WILLOW_WALL_HANGING_SIGN = register(func, "willow_wall_hanging_sign", p -> new WallHangingSignBlockBOP(BOPWoodTypes.WILLOW, p), wallVariant(WILLOW_HANGING_SIGN, true).mapColor(WILLOW_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));

        DEAD_SAPLING = register(func, "dead_sapling", p -> new SaplingBlockBOP(BOPTreeGrowers.DEAD, p), BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).pushReaction(PushReaction.DESTROY).noCollision().randomTicks().instabreak().sound(SoundType.GRASS));
        DEAD_BRANCH = register(func, "dead_branch", DeadBranchBlock::new, BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.COLOR_GRAY).ignitedByLava().noCollision().instabreak().sound(SoundType.WOOD));
        DEAD_LEAVES = register(func, "dead_leaves", p -> new TintedParticleLeavesBlock(0.01F, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.WOOD).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn(ModBlocks::ocelotOrParrot).isSuffocating(ModBlocks::never).isViewBlocking(ModBlocks::never).ignitedByLava().isRedstoneConductor(ModBlocks::never));
        DEAD_LOG = register(func, "dead_log", RotatedPillarBlock::new, logProperties(MapColor.STONE, MapColor.COLOR_GRAY, SoundType.WOOD));
        DEAD_WOOD = register(func, "dead_wood", RotatedPillarBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.COLOR_GRAY).strength(2.0F).sound(SoundType.WOOD));
        STRIPPED_DEAD_LOG = register(func, "stripped_dead_log", RotatedPillarBlock::new, logProperties(MapColor.STONE, MapColor.STONE, SoundType.WOOD));
        STRIPPED_DEAD_WOOD = register(func, "stripped_dead_wood", RotatedPillarBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.STONE).strength(2.0F).sound(SoundType.WOOD));
        DEAD_PLANKS = register(func, "dead_planks", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.STONE).strength(2.0F, 3.0F).sound(SoundType.WOOD));
        DEAD_STAIRS = register(func, "dead_stairs", p -> new StairBlock(DEAD_PLANKS.defaultBlockState(), p), Block.Properties.ofFullCopy(DEAD_PLANKS));
        DEAD_SLAB = register(func, "dead_slab", SlabBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.STONE).strength(2.0F, 3.0F).sound(SoundType.WOOD));
        DEAD_FENCE = register(func, "dead_fence", FenceBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(DEAD_PLANKS.defaultMapColor()).strength(2.0F, 3.0F).sound(SoundType.WOOD));
        DEAD_FENCE_GATE = register(func, "dead_fence_gate", p -> new FenceGateBlock(BOPWoodTypes.DEAD, p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(DEAD_PLANKS.defaultMapColor()).strength(2.0F, 3.0F));
        DEAD_DOOR = register(func, "dead_door", p -> new DoorBlock(BOPBlockSetTypes.DEAD, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(DEAD_PLANKS.defaultMapColor()).strength(3.0F).noOcclusion());
        DEAD_TRAPDOOR = register(func, "dead_trapdoor", p -> new TrapDoorBlock(BOPBlockSetTypes.DEAD, p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.STONE).strength(3.0F).noOcclusion());
        DEAD_PRESSURE_PLATE = register(func, "dead_pressure_plate", p -> new PressurePlateBlock(BOPBlockSetTypes.DEAD, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(DEAD_PLANKS.defaultMapColor()).noCollision().strength(0.5F));
        DEAD_BUTTON = register(func, "dead_button", p -> new ButtonBlock(BOPBlockSetTypes.DEAD, 30, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).noCollision().strength(0.5F));
        DEAD_SHELF = register(func, "dead_shelf", ShelfBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.STONE).instrument(NoteBlockInstrument.BASS).sound(SoundType.SHELF).ignitedByLava().strength(2.0F, 3.0F));
        DEAD_SIGN = register(func, "dead_sign", p -> new StandingSignBlockBOP(BOPWoodTypes.DEAD, p), BlockBehaviour.Properties.of().mapColor(DEAD_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        DEAD_WALL_SIGN = register(func, "dead_wall_sign", p -> new WallSignBlockBOP(BOPWoodTypes.DEAD, p), wallVariant(DEAD_SIGN, true).mapColor(DEAD_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        DEAD_HANGING_SIGN = register(func, "dead_hanging_sign", p -> new CeilingHangingSignBlockBOP(BOPWoodTypes.DEAD, p), BlockBehaviour.Properties.of().mapColor(DEAD_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        DEAD_WALL_HANGING_SIGN = register(func, "dead_wall_hanging_sign", p -> new WallHangingSignBlockBOP(BOPWoodTypes.DEAD, p), wallVariant(DEAD_HANGING_SIGN, true).mapColor(DEAD_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));

        MAGIC_SAPLING = register(func, "magic_sapling", p -> new SaplingBlockBOP(BOPTreeGrowers.MAGIC, p), BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_CYAN).pushReaction(PushReaction.DESTROY).noCollision().randomTicks().instabreak().sound(SoundType.CHERRY_SAPLING));
        MAGIC_LEAVES = register(func, "magic_leaves", p -> new UntintedParticleLeavesBlock(0.01F, ModParticles.MAGIC_LEAVES, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.COLOR_CYAN).strength(0.2F).randomTicks().sound(SoundType.CHERRY_LEAVES).noOcclusion().isValidSpawn(ModBlocks::ocelotOrParrot).isSuffocating(ModBlocks::never).isViewBlocking(ModBlocks::never).ignitedByLava().isRedstoneConductor(ModBlocks::never));
        MAGIC_LOG = register(func, "magic_log", RotatedPillarBlock::new, logProperties(MapColor.COLOR_BLUE, MapColor.TERRACOTTA_LIGHT_BLUE, SoundType.CHERRY_WOOD));
        MAGIC_WOOD = register(func, "magic_wood", RotatedPillarBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_LIGHT_BLUE).strength(2.0F).sound(SoundType.CHERRY_WOOD));
        STRIPPED_MAGIC_LOG = register(func, "stripped_magic_log", RotatedPillarBlock::new, logProperties(MapColor.COLOR_BLUE, MapColor.COLOR_BLUE, SoundType.CHERRY_WOOD));
        STRIPPED_MAGIC_WOOD = register(func, "stripped_magic_wood", RotatedPillarBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.COLOR_BLUE).strength(2.0F).sound(SoundType.CHERRY_WOOD));
        MAGIC_PLANKS = register(func, "magic_planks", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.COLOR_BLUE).strength(2.0F, 3.0F).sound(SoundType.CHERRY_WOOD));
        MAGIC_STAIRS = register(func, "magic_stairs", p -> new StairBlock(MAGIC_PLANKS.defaultBlockState(), p), Block.Properties.ofFullCopy(MAGIC_PLANKS));
        MAGIC_SLAB = register(func, "magic_slab", SlabBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.COLOR_BLUE).strength(2.0F, 3.0F).sound(SoundType.CHERRY_WOOD));
        MAGIC_FENCE = register(func, "magic_fence", FenceBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(MAGIC_PLANKS.defaultMapColor()).strength(2.0F, 3.0F).sound(SoundType.CHERRY_WOOD));
        MAGIC_FENCE_GATE = register(func, "magic_fence_gate", p -> new FenceGateBlock(BOPWoodTypes.MAGIC, p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(MAGIC_PLANKS.defaultMapColor()).strength(2.0F, 3.0F));
        MAGIC_DOOR = register(func, "magic_door", p -> new DoorBlock(BOPBlockSetTypes.MAGIC, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MAGIC_PLANKS.defaultMapColor()).strength(3.0F).noOcclusion());
        MAGIC_TRAPDOOR = register(func, "magic_trapdoor", p -> new TrapDoorBlock(BOPBlockSetTypes.MAGIC, p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.COLOR_BLUE).strength(3.0F).noOcclusion());
        MAGIC_PRESSURE_PLATE = register(func, "magic_pressure_plate", p -> new PressurePlateBlock(BOPBlockSetTypes.MAGIC, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(MAGIC_PLANKS.defaultMapColor()).noCollision().strength(0.5F));
        MAGIC_BUTTON = register(func, "magic_button", p -> new ButtonBlock(BOPBlockSetTypes.MAGIC, 30, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).noCollision().strength(0.5F));
        MAGIC_SHELF = register(func, "magic_shelf", ShelfBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_BLUE).instrument(NoteBlockInstrument.BASS).sound(SoundType.SHELF).ignitedByLava().strength(2.0F, 3.0F));
        MAGIC_SIGN = register(func, "magic_sign", p -> new StandingSignBlockBOP(BOPWoodTypes.MAGIC, p), BlockBehaviour.Properties.of().mapColor(MAGIC_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().noCollision().forceSolidOn().strength(1.0F));
        MAGIC_WALL_SIGN = register(func, "magic_wall_sign", p -> new WallSignBlockBOP(BOPWoodTypes.MAGIC, p), wallVariant(MAGIC_SIGN, true).mapColor(MAGIC_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().noCollision().forceSolidOn().strength(1.0F));
        MAGIC_HANGING_SIGN = register(func, "magic_hanging_sign", p -> new CeilingHangingSignBlockBOP(BOPWoodTypes.MAGIC, p), BlockBehaviour.Properties.of().mapColor(MAGIC_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        MAGIC_WALL_HANGING_SIGN = register(func, "magic_wall_hanging_sign", p -> new WallHangingSignBlockBOP(BOPWoodTypes.MAGIC, p), wallVariant(MAGIC_HANGING_SIGN, true).mapColor(MAGIC_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));

        UMBRAN_SAPLING = register(func, "umbran_sapling", p -> new SaplingBlockBOP(BOPTreeGrowers.UMBRAN, p), BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BLUE).pushReaction(PushReaction.DESTROY).noCollision().randomTicks().instabreak().sound(SoundType.GRASS));
        UMBRAN_LEAVES = register(func, "umbran_leaves", p -> new UntintedParticleLeavesBlock(0.0025F, ModParticles.UMBRAN_LEAVES, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.TERRACOTTA_BLUE).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn(ModBlocks::ocelotOrParrot).isSuffocating(ModBlocks::never).isViewBlocking(ModBlocks::never).ignitedByLava().isRedstoneConductor(ModBlocks::never));
        UMBRAN_LOG = register(func, "umbran_log", RotatedPillarBlock::new, logProperties(MapColor.TERRACOTTA_BLUE, MapColor.TERRACOTTA_BLUE, SoundType.NETHER_WOOD));
        UMBRAN_WOOD = register(func, "umbran_wood", RotatedPillarBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_BLUE).strength(2.0F).sound(SoundType.NETHER_WOOD));
        STRIPPED_UMBRAN_LOG = register(func, "stripped_umbran_log", RotatedPillarBlock::new, logProperties(MapColor.TERRACOTTA_BLUE, MapColor.TERRACOTTA_BLUE, SoundType.NETHER_WOOD));
        STRIPPED_UMBRAN_WOOD = register(func, "stripped_umbran_wood", RotatedPillarBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_BLUE).strength(2.0F).sound(SoundType.NETHER_WOOD));
        UMBRAN_PLANKS = register(func, "umbran_planks", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_BLUE).strength(2.0F, 3.0F).sound(SoundType.NETHER_WOOD));
        UMBRAN_STAIRS = register(func, "umbran_stairs", p -> new StairBlock(UMBRAN_PLANKS.defaultBlockState(), p), Block.Properties.ofFullCopy(UMBRAN_PLANKS));
        UMBRAN_SLAB = register(func, "umbran_slab", SlabBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_BLUE).strength(2.0F, 3.0F).sound(SoundType.NETHER_WOOD));
        UMBRAN_FENCE = register(func, "umbran_fence", FenceBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(UMBRAN_PLANKS.defaultMapColor()).strength(2.0F, 3.0F).sound(SoundType.NETHER_WOOD));
        UMBRAN_FENCE_GATE = register(func, "umbran_fence_gate", p -> new FenceGateBlock(BOPWoodTypes.UMBRAN, p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(UMBRAN_PLANKS.defaultMapColor()).strength(2.0F, 3.0F));
        UMBRAN_DOOR = register(func, "umbran_door", p -> new DoorBlock(BOPBlockSetTypes.UMBRAN, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(UMBRAN_PLANKS.defaultMapColor()).strength(3.0F).noOcclusion());
        UMBRAN_TRAPDOOR = register(func, "umbran_trapdoor", p -> new TrapDoorBlock(BOPBlockSetTypes.UMBRAN, p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.TERRACOTTA_BLUE).strength(3.0F).noOcclusion());
        UMBRAN_PRESSURE_PLATE = register(func, "umbran_pressure_plate", p -> new PressurePlateBlock(BOPBlockSetTypes.UMBRAN, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(UMBRAN_PLANKS.defaultMapColor()).noCollision().strength(0.5F));
        UMBRAN_BUTTON = register(func, "umbran_button", p -> new ButtonBlock(BOPBlockSetTypes.UMBRAN, 30, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).noCollision().strength(0.5F));
        UMBRAN_SHELF = register(func, "umbran_shelf", ShelfBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BLUE).instrument(NoteBlockInstrument.BASS).sound(SoundType.SHELF).ignitedByLava().strength(2.0F, 3.0F));
        UMBRAN_SIGN = register(func, "umbran_sign", p -> new StandingSignBlockBOP(BOPWoodTypes.UMBRAN, p), BlockBehaviour.Properties.of().mapColor(UMBRAN_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        UMBRAN_WALL_SIGN = register(func, "umbran_wall_sign", p -> new WallSignBlockBOP(BOPWoodTypes.UMBRAN, p), wallVariant(UMBRAN_SIGN, true).mapColor(UMBRAN_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        UMBRAN_HANGING_SIGN = register(func, "umbran_hanging_sign", p -> new CeilingHangingSignBlockBOP(BOPWoodTypes.UMBRAN, p), BlockBehaviour.Properties.of().mapColor(UMBRAN_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        UMBRAN_WALL_HANGING_SIGN = register(func, "umbran_wall_hanging_sign", p -> new WallHangingSignBlockBOP(BOPWoodTypes.UMBRAN, p), wallVariant(UMBRAN_HANGING_SIGN, true).mapColor(UMBRAN_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));

        HELLBARK_SAPLING = register(func, "hellbark_sapling", p -> new SaplingBlockBOP(BOPTreeGrowers.HELLBARK, p), BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_PURPLE).pushReaction(PushReaction.DESTROY).noCollision().randomTicks().instabreak().sound(SoundType.GRASS));
        HELLBARK_LEAVES = register(func, "hellbark_leaves", p -> new UntintedParticleLeavesBlock(0.001F, ModParticles.HELLBARK_LEAVES, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.TERRACOTTA_PURPLE).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn(ModBlocks::ocelotOrParrot).isSuffocating(ModBlocks::never).isViewBlocking(ModBlocks::never).isRedstoneConductor(ModBlocks::never));
        HELLBARK_LOG = register(func, "hellbark_log", RotatedPillarBlock::new, logNonIgnitingProperties(MapColor.TERRACOTTA_GRAY, MapColor.COLOR_LIGHT_GRAY, SoundType.NETHER_WOOD));
        HELLBARK_WOOD = register(func, "hellbark_wood", RotatedPillarBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_LIGHT_GRAY).strength(2.0F).sound(SoundType.NETHER_WOOD));
        STRIPPED_HELLBARK_LOG = register(func, "stripped_hellbark_log", RotatedPillarBlock::new, logNonIgnitingProperties(MapColor.TERRACOTTA_GRAY, MapColor.TERRACOTTA_GRAY, SoundType.NETHER_WOOD));
        STRIPPED_HELLBARK_WOOD = register(func, "stripped_hellbark_wood", RotatedPillarBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.TERRACOTTA_GRAY).strength(2.0F).sound(SoundType.NETHER_WOOD));
        HELLBARK_PLANKS = register(func, "hellbark_planks", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.TERRACOTTA_GRAY).strength(2.0F, 3.0F).sound(SoundType.NETHER_WOOD));
        HELLBARK_STAIRS = register(func, "hellbark_stairs", p -> new StairBlock(HELLBARK_PLANKS.defaultBlockState(), p), Block.Properties.ofFullCopy(HELLBARK_PLANKS));
        HELLBARK_SLAB = register(func, "hellbark_slab", SlabBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.TERRACOTTA_GRAY).strength(2.0F, 3.0F).sound(SoundType.NETHER_WOOD));
        HELLBARK_FENCE = register(func, "hellbark_fence", FenceBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).forceSolidOn().mapColor(HELLBARK_PLANKS.defaultMapColor()).strength(2.0F, 3.0F).sound(SoundType.NETHER_WOOD));
        HELLBARK_FENCE_GATE = register(func, "hellbark_fence_gate", p -> new FenceGateBlock(BOPWoodTypes.HELLBARK, p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).forceSolidOn().mapColor(HELLBARK_PLANKS.defaultMapColor()).strength(2.0F, 3.0F));
        HELLBARK_DOOR = register(func, "hellbark_door", p -> new DoorBlock(BOPBlockSetTypes.HELLBARK, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).instrument(NoteBlockInstrument.BASS).mapColor(HELLBARK_PLANKS.defaultMapColor()).strength(3.0F).noOcclusion());
        HELLBARK_TRAPDOOR = register(func, "hellbark_trapdoor", p -> new TrapDoorBlock(BOPBlockSetTypes.HELLBARK, p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.TERRACOTTA_GRAY).strength(3.0F).noOcclusion());
        HELLBARK_PRESSURE_PLATE = register(func, "hellbark_pressure_plate", p -> new PressurePlateBlock(BOPBlockSetTypes.HELLBARK, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).instrument(NoteBlockInstrument.BASS).forceSolidOn().mapColor(HELLBARK_PLANKS.defaultMapColor()).noCollision().strength(0.5F));
        HELLBARK_BUTTON = register(func, "hellbark_button", p -> new ButtonBlock(BOPBlockSetTypes.HELLBARK, 30, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).noCollision().strength(0.5F));
        HELLBARK_SHELF = register(func, "hellbark_shelf", ShelfBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_GRAY).instrument(NoteBlockInstrument.BASS).sound(SoundType.SHELF).ignitedByLava().strength(2.0F, 3.0F));
        HELLBARK_SIGN = register(func, "hellbark_sign", p -> new StandingSignBlockBOP(BOPWoodTypes.HELLBARK, p), BlockBehaviour.Properties.of().mapColor(HELLBARK_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).forceSolidOn().noCollision().strength(1.0F));
        HELLBARK_WALL_SIGN = register(func, "hellbark_wall_sign", p -> new WallSignBlockBOP(BOPWoodTypes.HELLBARK, p), wallVariant(HELLBARK_SIGN, true).mapColor(HELLBARK_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).forceSolidOn().noCollision().strength(1.0F));
        HELLBARK_HANGING_SIGN = register(func, "hellbark_hanging_sign", p -> new CeilingHangingSignBlockBOP(BOPWoodTypes.HELLBARK, p), BlockBehaviour.Properties.of().mapColor(HELLBARK_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).forceSolidOn().noCollision().strength(1.0F));
        HELLBARK_WALL_HANGING_SIGN = register(func, "hellbark_wall_hanging_sign", p -> new WallHangingSignBlockBOP(BOPWoodTypes.HELLBARK, p), wallVariant(HELLBARK_HANGING_SIGN, true).mapColor(HELLBARK_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).forceSolidOn().noCollision().strength(1.0F));

        EMPYREAL_SAPLING = register(func, "empyreal_sapling", p -> new SaplingBlockBOP(BOPTreeGrowers.EMPYREAL, p), BlockBehaviour.Properties.of().mapColor(MapColor.SAND).pushReaction(PushReaction.DESTROY).noCollision().randomTicks().instabreak().sound(SoundType.GRASS));
        EMPYREAL_LEAVES = register(func, "empyreal_leaves", p -> new UntintedParticleLeavesBlock(0.0025F, ColorParticleOption.create(ParticleTypes.TINTED_LEAVES, -5962), p), BlockBehaviour.Properties.of().mapColor(MapColor.SAND).pushReaction(PushReaction.DESTROY).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn(ModBlocks::ocelotOrParrot).isSuffocating(ModBlocks::never).isViewBlocking(ModBlocks::never).ignitedByLava().isRedstoneConductor(ModBlocks::never));
        EMPYREAL_LOG = register(func, "empyreal_log", RotatedPillarBlock::new, logProperties(MapColor.COLOR_PURPLE, MapColor.QUARTZ, SoundType.NETHER_WOOD));
        EMPYREAL_WOOD = register(func, "empyreal_wood", RotatedPillarBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.QUARTZ).strength(2.0F).sound(SoundType.NETHER_WOOD));
        STRIPPED_EMPYREAL_LOG = register(func, "stripped_empyreal_log", RotatedPillarBlock::new, logProperties(MapColor.COLOR_PURPLE, MapColor.COLOR_PURPLE, SoundType.NETHER_WOOD));
        STRIPPED_EMPYREAL_WOOD = register(func, "stripped_empyreal_wood", RotatedPillarBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.COLOR_PURPLE).strength(2.0F).sound(SoundType.NETHER_WOOD));
        EMPYREAL_PLANKS = register(func, "empyreal_planks", Block::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.COLOR_PURPLE).strength(2.0F, 3.0F).sound(SoundType.NETHER_WOOD));
        EMPYREAL_STAIRS = register(func, "empyreal_stairs", p -> new StairBlock(EMPYREAL_PLANKS.defaultBlockState(), p), Block.Properties.ofFullCopy(EMPYREAL_PLANKS));
        EMPYREAL_SLAB = register(func, "empyreal_slab", SlabBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.COLOR_PURPLE).strength(2.0F, 3.0F).sound(SoundType.NETHER_WOOD));
        EMPYREAL_FENCE = register(func, "empyreal_fence", FenceBlock::new, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(EMPYREAL_PLANKS.defaultMapColor()).strength(2.0F, 3.0F).sound(SoundType.NETHER_WOOD));
        EMPYREAL_FENCE_GATE = register(func, "empyreal_fence_gate", p -> new FenceGateBlock(BOPWoodTypes.EMPYREAL, p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(EMPYREAL_PLANKS.defaultMapColor()).strength(2.0F, 3.0F));
        EMPYREAL_DOOR = register(func, "empyreal_door", p -> new DoorBlock(BOPBlockSetTypes.EMPYREAL, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(EMPYREAL_PLANKS.defaultMapColor()).strength(3.0F).noOcclusion());
        EMPYREAL_TRAPDOOR = register(func, "empyreal_trapdoor", p -> new TrapDoorBlock(BOPBlockSetTypes.EMPYREAL, p), BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor(MapColor.COLOR_PURPLE).strength(3.0F).noOcclusion());
        EMPYREAL_PRESSURE_PLATE = register(func, "empyreal_pressure_plate", p -> new PressurePlateBlock(BOPBlockSetTypes.EMPYREAL, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().mapColor(EMPYREAL_PLANKS.defaultMapColor()).noCollision().strength(0.5F));
        EMPYREAL_BUTTON = register(func, "empyreal_button", p -> new ButtonBlock(BOPBlockSetTypes.EMPYREAL, 30, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).noCollision().strength(0.5F));
        EMPYREAL_SHELF = register(func, "empyreal_shelf", ShelfBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_PURPLE).instrument(NoteBlockInstrument.BASS).sound(SoundType.SHELF).ignitedByLava().strength(2.0F, 3.0F));
        EMPYREAL_SIGN = register(func, "empyreal_sign", p -> new StandingSignBlockBOP(BOPWoodTypes.EMPYREAL, p), BlockBehaviour.Properties.of().mapColor(EMPYREAL_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        EMPYREAL_WALL_SIGN = register(func, "empyreal_wall_sign", p -> new WallSignBlockBOP(BOPWoodTypes.EMPYREAL, p), wallVariant(EMPYREAL_SIGN, true).mapColor(EMPYREAL_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        EMPYREAL_HANGING_SIGN = register(func, "empyreal_hanging_sign", p -> new CeilingHangingSignBlockBOP(BOPWoodTypes.EMPYREAL, p), BlockBehaviour.Properties.of().mapColor(EMPYREAL_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));
        EMPYREAL_WALL_HANGING_SIGN = register(func, "empyreal_wall_hanging_sign", p -> new WallHangingSignBlockBOP(BOPWoodTypes.EMPYREAL, p), wallVariant(EMPYREAL_HANGING_SIGN, true).mapColor(EMPYREAL_PLANKS.defaultMapColor()).instrument(NoteBlockInstrument.BASS).ignitedByLava().forceSolidOn().noCollision().strength(1.0F));

        //Flowers
        FLOWER_BUD = register(func, "flower_bud", FlowerBudBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XZ));
        ORIGIN_DANDELION = register(func, "origin_dandelion", p -> new FlowerBlockBOP(MobEffects.SLOWNESS, p), BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XZ));
        ORIGIN_ROSE = register(func, "origin_rose", p -> new FlowerBlockBOP(MobEffects.SLOWNESS, p), BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XZ));
        MARIGOLD = register(func, "marigold", p -> new FlowerBlockBOP(MobEffects.SPEED, p), BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XZ));
        VIOLET = register(func, "violet", p -> new FlowerBlockBOP(MobEffects.NAUSEA, p), BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XZ));
        LAVENDER = register(func, "lavender", p -> new FlowerBlockBOP(MobEffects.HEALTH_BOOST, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.COLOR_MAGENTA).noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XZ));
        TALL_LAVENDER = register(func, "tall_lavender", TallFlowerBlockBOP::new, BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XZ));
        WHITE_LAVENDER = register(func, "white_lavender", p -> new FlowerBlockBOP(MobEffects.HEALTH_BOOST, p), BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.SNOW).noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XZ));
        TALL_WHITE_LAVENDER = register(func, "tall_white_lavender", TallFlowerBlockBOP::new, BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XZ));
        BLUE_HYDRANGEA = register(func, "blue_hydrangea", TallFlowerBlockBOP::new, BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XZ));
        GOLDENROD = register(func, "goldenrod", TallFlowerBlockBOP::new, BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XZ));
        ORANGE_COSMOS = register(func, "orange_cosmos", p -> new FlowerBlockBOP(MobEffects.ABSORPTION, p), BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XZ));
        PINK_DAFFODIL = register(func, "pink_daffodil", p -> new FlowerBlockBOP(MobEffects.INVISIBILITY, p), BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XZ));
        PINK_HIBISCUS = register(func, "pink_hibiscus", p -> new FlowerBlockBOP(MobEffects.REGENERATION, p), BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XZ));
        PURPLE_WILDFLOWERS = register(func, "purple_wildflowers", PurpleWildflowerBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollision().sound(SoundType.PINK_PETALS).pushReaction(PushReaction.DESTROY));
        WHITE_PETALS = register(func, "white_petals", FlowerBedBlockBOP::new, BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).noCollision().sound(SoundType.PINK_PETALS).pushReaction(PushReaction.DESTROY));
        ICY_IRIS = register(func, "icy_iris", TallFlowerBlockBOP::new, BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XZ));
        GLOWFLOWER = register(func, "glowflower", p -> new FlowerBlockBOP(MobEffects.GLOWING, p), BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XZ).lightLevel((state) -> 9));
        WILTED_LILY = register(func, "wilted_lily", p -> new FlowerBlockBOP(MobEffects.UNLUCK, p), BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XZ));
        BURNING_BLOSSOM = register(func, "burning_blossom", p -> new FlowerBlockBOP(MobEffects.FIRE_RESISTANCE, p), BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XZ).lightLevel((state) -> 7));
        ENDBLOOM = register(func, "endbloom", p -> new FlowerBlockBOP(MobEffects.WATER_BREATHING, p), BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_YELLOW).pushReaction(PushReaction.DESTROY).noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XZ));

        //Plants
        SPROUT = register(func, "sprout", FoliageBlockBOP::new, BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).replaceable().ignitedByLava().noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XYZ));
        HIGH_GRASS = register(func, "high_grass", HighGrassBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).randomTicks().replaceable().ignitedByLava().noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XZ));
        HIGH_GRASS_PLANT = register(func, "high_grass_plant", HighGrassPlantBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).replaceable().ignitedByLava().noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XZ));
        CLOVER = register(func, "clover", CloverBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).replaceable().ignitedByLava().noCollision().sound(SoundType.PINK_PETALS).pushReaction(PushReaction.DESTROY));
        HUGE_CLOVER_PETAL = register(func, "huge_clover_petal", HugeCloverPetalBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).ignitedByLava().instabreak().sound(SoundType.PINK_PETALS));
        HUGE_LILY_PAD = register(func, "huge_lily_pad", HugeLilyPadBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).pushReaction(PushReaction.DESTROY).instabreak().sound(SoundType.LILY_PAD).noOcclusion());
        WATERLILY = register(func, "waterlily", WaterlilyBlockBOP::new, BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.COLOR_PINK).noOcclusion().noCollision().instabreak().sound(SoundType.LILY_PAD).offsetType(BlockBehaviour.OffsetType.XZ));

        DUNE_GRASS = register(func, "dune_grass", FoliageBlockBOP::new, BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.TERRACOTTA_LIGHT_GREEN).replaceable().ignitedByLava().noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XYZ));
        DESERT_GRASS = register(func, "desert_grass", FoliageBlockBOP::new, BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.TERRACOTTA_ORANGE).replaceable().ignitedByLava().noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XYZ));
        DEAD_GRASS = register(func, "dead_grass", FoliageBlockBOP::new, BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.WOOD).replaceable().ignitedByLava().noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XYZ));
        TUNDRA_SHRUB = register(func, "tundra_shrub", FoliageBlockBOP::new, BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.PLANT).replaceable().ignitedByLava().noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XZ));
        ENDERPHYTE = register(func, "enderphyte", FoliageBlockBOP::new, BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.TERRACOTTA_YELLOW).replaceable().ignitedByLava().noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XYZ));
        LUMALOOP = register(func, "lumaloop", LumaloopBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_YELLOW).pushReaction(PushReaction.DESTROY).randomTicks().replaceable().ignitedByLava().noCollision().instabreak().sound(SoundType.GRASS).lightLevel(LumaloopBlock.lightLevel(10)).offsetType(BlockBehaviour.OffsetType.XZ));
        LUMALOOP_PLANT = register(func, "lumaloop_plant", LumaloopPlantBlock::new, BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_YELLOW).pushReaction(PushReaction.DESTROY).replaceable().ignitedByLava().noCollision().instabreak().sound(SoundType.GRASS).lightLevel(LumaloopPlantBlock.lightLevel(10)).offsetType(BlockBehaviour.OffsetType.XZ));
        BARLEY = register(func, "barley", DoublePlantBlockBOP::new, BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.TERRACOTTA_YELLOW).ignitedByLava().noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XZ));
        SEA_OATS = register(func, "sea_oats", SeaOatsBlock::new, BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.SAND).noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XZ));
        CATTAIL = register(func, "cattail", DoubleWatersidePlantBlock::new, BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.DIRT).noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XZ));
        REED = register(func, "reed", DoubleWaterPlantBlock::new, BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.DIRT).replaceable().noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XZ));
        WATERGRASS = register(func, "watergrass", DoubleWaterPlantBlock::new, BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.PLANT).replaceable().noCollision().instabreak().sound(SoundType.GRASS).offsetType(BlockBehaviour.OffsetType.XZ));

        TINY_CACTUS = register(func, "tiny_cactus", TinyCactusBlock::new, BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.PLANT).noCollision().instabreak().sound(SoundType.WOOL).offsetType(BlockBehaviour.OffsetType.XZ));
        BRAMBLE = register(func, "bramble", BrambleBlock::new, BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).mapColor(MapColor.NETHER).strength(0.4F).sound(SoundType.WOOD));
        BRAMBLE_LEAVES = register(func, "bramble_leaves", BrambleLeavesBlock::new, BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).mapColor(MapColor.PLANT).instabreak().sound(SoundType.GRASS));

        //Potted Plants
        POTTED_FLOWERING_OAK_SAPLING = register(func, "potted_flowering_oak_sapling", p -> new FlowerPotBlock(FLOWERING_OAK_SAPLING, p),  BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_CYPRESS_SAPLING = register(func, "potted_cypress_sapling", p -> new FlowerPotBlock(CYPRESS_SAPLING, p),  BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_SNOWBLOSSOM_SAPLING = register(func, "potted_snowblossom_sapling", p -> new FlowerPotBlock(SNOWBLOSSOM_SAPLING, p),  BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_ORIGIN_OAK_SAPLING = register(func, "potted_origin_oak_sapling", p -> new FlowerPotBlock(ORIGIN_OAK_SAPLING, p),  BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_FIR_SAPLING = register(func, "potted_fir_sapling", p -> new FlowerPotBlock(FIR_SAPLING, p),  BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_PINE_SAPLING = register(func, "potted_pine_sapling", p -> new FlowerPotBlock(PINE_SAPLING, p),  BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_RED_MAPLE_SAPLING = register(func, "potted_red_maple_sapling", p -> new FlowerPotBlock(RED_MAPLE_SAPLING, p),  BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_ORANGE_MAPLE_SAPLING = register(func, "potted_orange_maple_sapling", p -> new FlowerPotBlock(ORANGE_MAPLE_SAPLING, p),  BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_YELLOW_MAPLE_SAPLING = register(func, "potted_yellow_maple_sapling", p -> new FlowerPotBlock(YELLOW_MAPLE_SAPLING, p),  BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_REDWOOD_SAPLING = register(func, "potted_redwood_sapling", p -> new FlowerPotBlock(REDWOOD_SAPLING, p),  BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_MAHOGANY_SAPLING = register(func, "potted_mahogany_sapling", p -> new FlowerPotBlock(MAHOGANY_SAPLING, p),  BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_JACARANDA_SAPLING = register(func, "potted_jacaranda_sapling", p -> new FlowerPotBlock(JACARANDA_SAPLING, p),  BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_PALM_SAPLING = register(func, "potted_palm_sapling", p -> new FlowerPotBlock(PALM_SAPLING, p),  BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_WILLOW_SAPLING = register(func, "potted_willow_sapling", p -> new FlowerPotBlock(WILLOW_SAPLING, p),  BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_DEAD_SAPLING = register(func, "potted_dead_sapling", p -> new FlowerPotBlock(DEAD_SAPLING, p),  BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_MAGIC_SAPLING = register(func, "potted_magic_sapling", p -> new FlowerPotBlock(MAGIC_SAPLING, p),  BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_UMBRAN_SAPLING = register(func, "potted_umbran_sapling", p -> new FlowerPotBlock(UMBRAN_SAPLING, p),  BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_HELLBARK_SAPLING = register(func, "potted_hellbark_sapling", p -> new FlowerPotBlock(HELLBARK_SAPLING, p),  BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_EMPYREAL_SAPLING = register(func, "potted_empyreal_sapling", p -> new FlowerPotBlock(EMPYREAL_SAPLING, p),  BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_FLOWER_BUD = register(func, "potted_flower_bud", p -> new FlowerPotBlock(FLOWER_BUD, p), BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_ORIGIN_DANDELION = register(func, "potted_origin_dandelion", p -> new FlowerPotBlock(ORIGIN_DANDELION, p), BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_ORIGIN_ROSE = register(func, "potted_origin_rose", p -> new FlowerPotBlock(ORIGIN_ROSE, p), BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_MARIGOLD = register(func, "potted_marigold", p -> new FlowerPotBlock(MARIGOLD, p), BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_VIOLET = register(func, "potted_violet", p -> new FlowerPotBlock(VIOLET, p), BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_LAVENDER = register(func, "potted_lavender", p -> new FlowerPotBlock(LAVENDER, p), BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_WHITE_LAVENDER = register(func, "potted_white_lavender", p -> new FlowerPotBlock(WHITE_LAVENDER, p), BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_ORANGE_COSMOS = register(func, "potted_orange_cosmos", p -> new FlowerPotBlock(ORANGE_COSMOS, p), BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_PINK_DAFFODIL = register(func, "potted_pink_daffodil", p -> new FlowerPotBlock(PINK_DAFFODIL, p), BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_PINK_HIBISCUS = register(func, "potted_pink_hibiscus", p -> new FlowerPotBlock(PINK_HIBISCUS, p), BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_GLOWFLOWER = register(func, "potted_glowflower", p -> new FlowerPotBlock(GLOWFLOWER, p), BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak().lightLevel((state) -> 9));
        POTTED_WILTED_LILY = register(func, "potted_wilted_lily", p -> new FlowerPotBlock(WILTED_LILY, p), BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_BURNING_BLOSSOM = register(func, "potted_burning_blossom", p -> new FlowerPotBlock(BURNING_BLOSSOM, p), BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak().lightLevel((state) -> 7));
        POTTED_ENDBLOOM = register(func, "potted_endbloom", p -> new FlowerPotBlock(ENDBLOOM, p), BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_SPROUT = register(func, "potted_sprout", p -> new FlowerPotBlock(SPROUT, p), BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_TINY_CACTUS = register(func, "potted_tiny_cactus", p -> new FlowerPotBlock(TINY_CACTUS, p), BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_TOADSTOOL = register(func, "potted_toadstool", p -> new FlowerPotBlock(TOADSTOOL, p), BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
        POTTED_GLOWSHROOM = register(func, "potted_glowshroom", p -> new FlowerPotBlock(GLOWSHROOM, p), BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak().lightLevel((state) -> 3));
        //POTTED_VOIDCAP = register(func, "potted_voidcap", p -> new FlowerPotBlock(VOIDCAP, p), BlockBehaviour.Properties.of().noOcclusion().pushReaction(PushReaction.DESTROY).instabreak());
    }

    private static BlockBehaviour.Properties logProperties(MapColor MapColor, MapColor MapColor2, SoundType soundType) {
        return BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).ignitedByLava().mapColor((blockState) -> blockState.getValue(RotatedPillarBlock.AXIS) == Direction.Axis.Y ? MapColor : MapColor2).strength(2.0F).sound(soundType);
    }

    private static BlockBehaviour.Properties logNonIgnitingProperties(MapColor MapColor, MapColor MapColor2, SoundType soundType) {
        return BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).mapColor((blockState) -> blockState.getValue(RotatedPillarBlock.AXIS) == Direction.Axis.Y ? MapColor : MapColor2).strength(2.0F).sound(soundType);
    }

    private static BlockBehaviour.Properties wallVariant(Block block, boolean p_368625_)
    {
        BlockBehaviour.Properties blockbehaviour$properties = block.properties();
        BlockBehaviour.Properties blockbehaviour$properties1 = BlockBehaviour.Properties.of().overrideLootTable(block.getLootTable());
        if (p_368625_) {
            blockbehaviour$properties1 = blockbehaviour$properties1.overrideDescription(block.getDescriptionId());
        }

        return blockbehaviour$properties1;
    }

    private static Block register(BiConsumer<ResourceLocation, Block> func, ResourceKey<Block> key, Function<BlockBehaviour.Properties, Block> factory, BlockBehaviour.Properties properties)
    {
        Block block = factory.apply(properties.setId(key));
        func.accept(key.location(), block);
        return block;
    }

    private static Block register(BiConsumer<ResourceLocation, Block> func, String name, Function<BlockBehaviour.Properties, Block> factory, BlockBehaviour.Properties properties)
    {
        return register(func, blockId(name), factory, properties);
    }

    private static ResourceKey<Block> blockId(String name)
    {
        return ResourceKey.create(Registries.BLOCK, ResourceLocation.fromNamespaceAndPath(BiomesOPlenty.MOD_ID, name));
    }

    private static Boolean never(BlockState blockState, BlockGetter blockGetter, BlockPos blockPos) {
        return false;
    }

    private static Boolean ocelotOrParrot(BlockState p_50822_, BlockGetter p_50823_, BlockPos p_50824_, EntityType<?> p_50825_) {
        return p_50825_ == EntityType.OCELOT || p_50825_ == EntityType.PARROT;
    }
}
